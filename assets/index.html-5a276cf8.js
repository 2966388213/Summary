import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-8cd6f686.js";const t={},d=e(`<h1 id="lua" tabindex="-1"><a class="header-anchor" href="#lua" aria-hidden="true">#</a> lua</h1><h2 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>global <span class="token operator">=</span> <span class="token string">&quot;这是全局变量，无论在何处声明都是全局的&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">local</span> part <span class="token operator">=</span> <span class="token string">&quot;这是局部变量，只能在声明的函数或者作用域中使用&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><h2 id="代码块" tabindex="-1"><a class="header-anchor" href="#代码块" aria-hidden="true">#</a> 代码块</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>    <span class="token keyword">do</span>
        <span class="token comment">-- 这是一个作用域，内部定义的局部变量外部无法访问</span>
    <span class="token keyword">end</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>空类型</td></tr><tr><td>boolean</td><td>布尔类型</td></tr><tr><td>number</td><td>双精度的浮点类型</td></tr><tr><td>string</td><td>字符串类型</td></tr><tr><td>function</td><td>函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>独立线程</td></tr><tr><td>table</td><td>数组或者对象</td></tr></tbody></table><h2 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环" aria-hidden="true">#</a> for循环</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">for</span> variable <span class="token operator">=</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> step <span class="token keyword">do</span>
    <span class="token comment">-- 循环体</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> 
<span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> condition <span class="token keyword">then</span>
    <span class="token comment">-- 条件为真时执行的代码</span>
<span class="token keyword">else</span>
    <span class="token comment">-- 条件为假时执行的代码</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&quot;一个简单函数&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>把函数当作一个值来使用，可以把它赋值给变量，也可以把它作为参数传递给其他函数。</p></blockquote><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>delegate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;我被调用了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;准备调用回调函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多个返回值</p></blockquote><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">maximum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token keyword">local</span> a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token keyword">end</span>

a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">maximum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>
    sex <span class="token operator">=</span> <span class="token string">&quot;男&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>^</td><td>取幂</td></tr><tr><td>-</td><td>负号</td></tr><tr><td>//</td><td>整除</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>~=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>not</td><td>逻辑非</td></tr></tbody></table><h3 id="其他操作符" tabindex="-1"><a class="header-anchor" href="#其他操作符" aria-hidden="true">#</a> 其他操作符</h3><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>..</td><td>连接两个字符串</td></tr><tr><td>#</td><td>一元运算符，返回字符串或数组的长度</td></tr></tbody></table><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><p>Lua中的迭代器是一种用于遍历集合或序列的方式，通常使用 <code>for</code> 循环来使用。以下是一个简单的示例，展示如何创建和使用一个基本的迭代器：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 创建一个包含一些数据的表格</span>
<span class="token keyword">local</span> myTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span>

<span class="token comment">-- 定义一个迭代器函数</span>
<span class="token keyword">function</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span>
    <span class="token keyword">local</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">local</span> maxIndex <span class="token operator">=</span> <span class="token operator">#</span>collection

    <span class="token comment">-- 返回一个迭代器函数，该函数在每次迭代中返回下一个元素</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> maxIndex <span class="token keyword">then</span>
            <span class="token keyword">return</span> collection<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">-- 使用迭代器遍历表格</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token function">myIterator</span><span class="token punctuation">(</span>myTable<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们首先创建了一个包含一些数据的表格 <code>myTable</code>。然后，我们定义了一个名为 <code>myIterator</code> 的迭代器函数，该函数接受一个集合（表格）作为参数，并返回一个迭代器函数。这个迭代器函数在每次调用时返回下一个元素，直到遍历完整个集合。</p><p>最后，我们使用 <code>for</code> 循环和迭代器来遍历 <code>myTable</code> 表格，依次打印出其中的元素。</p><p>这是一个基本的示例，说明了如何手动创建和使用迭代器。在实际应用中，Lua还提供了一些标准库函数来简化迭代过程，如 <code>ipairs</code> 用于遍历数组式表格和 <code>pairs</code> 用于遍历键-值表格。这些函数可以帮助您更方便地进行迭代操作。</p>`,37),o=[d];function l(p,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","index.html.vue"]]);export{u as default};
