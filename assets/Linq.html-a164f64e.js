import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-d03b5bc4.js";const t={},p=e(`<h1 id="linq" tabindex="-1"><a class="header-anchor" href="#linq" aria-hidden="true">#</a> LINQ</h1><h2 id="linq中常见的骚操作" tabindex="-1"><a class="header-anchor" href="#linq中常见的骚操作" aria-hidden="true">#</a> LINQ中常见的骚操作</h2><ol><li>GroupBy</li></ol><p><code>GroupBy</code>操作符可以将集合中的元素按照指定的属性进行分组，返回一个<code>IGrouping&lt;TKey, TElement&gt;</code>类型的集合，其中<code>TKey</code>表示分组的属性类型，<code>TElement</code>表示分组后每个组的元素类型。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Join</li></ol><p><code>Join</code>操作符可以将两个集合按照指定的属性进行关联，返回一个新的集合，其中每个元素是关联后的结果。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>collection2<span class="token punctuation">,</span> item1 <span class="token operator">=&gt;</span> item1<span class="token punctuation">.</span>Property1<span class="token punctuation">,</span> item2 <span class="token operator">=&gt;</span> item2<span class="token punctuation">.</span>Property2<span class="token punctuation">,</span> <span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Item1 <span class="token operator">=</span> item1<span class="token punctuation">,</span> Item2 <span class="token operator">=</span> item2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Union</li></ol><p><code>Union</code>操作符可以将两个集合合并成一个集合，去除重复的元素，返回一个新的集合。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">Union</span><span class="token punctuation">(</span>collection2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>Except</li></ol><p><code>Except</code>操作符可以从一个集合中排除另一个集合中的元素，返回一个新的集合。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">Except</span><span class="token punctuation">(</span>collection2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Any</li></ol><p><code>Any</code>操作符可以判断集合中是否存在满足条件的元素，返回一个布尔值。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>All</li></ol><p><code>All</code>操作符可以判断集合中的所有元素是否都满足条件，返回一个布尔值。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>Take</li></ol><p><code>Take</code>操作符可以从集合中取出指定数量的元素，返回一个新的集合。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>Skip</li></ol><p><code>Skip</code>操作符可以跳过指定数量的元素，返回一个新的集合。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>OrderBy/OrderByDescending/ThenBy/ThenByDescending</li></ol><p>这一系列操作符可以对集合中的元素按照指定的属性进行排序，分别表示升序、降序、第二关键字升序、第二关键字降序排序。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上是一些常用的LINQ骚操作，除此之外还有很多其他的操作符可以帮助开发者快速高效地查询和操作数据。</p><h2 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h2><p>在LINQ中，可以使用<code>Where</code>操作符和<code>Contains</code>方法实现模糊查询。<code>Where</code>操作符用于筛选集合中符合条件的元素，而<code>Contains</code>方法用于判断一个字符串是否包含另一个字符串。结合使用它们可以实现模糊查询。</p><p>例如，假设有一个字符串集合<code>stringCollection</code>，要查询其中包含特定子字符串<code>keyword</code>的元素，可以使用以下语法：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>item</code>是集合中的每个元素，<code>Contains</code>方法用于判断<code>item</code>是否包含<code>keyword</code>，如果包含则返回<code>true</code>，否则返回<code>false</code>。<code>Where</code>操作符用于筛选满足条件的元素，最终返回一个新的集合。</p><p>需要注意的是，这种模糊查询方式只能查询包含特定子字符串的元素，如果要查询以特定子字符串开头或结尾的元素，可以使用<code>StartsWith</code>或<code>EndsWith</code>方法代替<code>Contains</code>方法。</p><p>例如，要查询以特定子字符串<code>prefix</code>开头的元素，可以使用以下语法：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要查询以特定子字符串<code>suffix</code>结尾的元素，可以使用以下语法：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> stringCollection<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用这些方法可以快速实现字符串的模糊查询。</p><h2 id="一些不常用-但有用的操作" tabindex="-1"><a class="header-anchor" href="#一些不常用-但有用的操作" aria-hidden="true">#</a> 一些不常用，但有用的操作</h2><p>LINQ（Language-Integrated Query）是一种强大的查询语言和操作符，可以帮助开发者快速、方便地查询和操作数据。除了常见的操作符和用法外，LINQ中还有一些冷门的小知识，下面列举一些：</p><ol><li>连接多个集合</li></ol><p>除了使用<code>Join</code>操作符连接两个集合外，LINQ还支持连接多个集合，可以使用<code>Join</code>和<code>SelectMany</code>操作符组合使用实现。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>collection2<span class="token punctuation">,</span> item1 <span class="token operator">=&gt;</span> item1<span class="token punctuation">.</span>Property1<span class="token punctuation">,</span> item2 <span class="token operator">=&gt;</span> item2<span class="token punctuation">.</span>Property2<span class="token punctuation">,</span> <span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Item1 <span class="token operator">=</span> item1<span class="token punctuation">,</span> Item2 <span class="token operator">=</span> item2 <span class="token punctuation">}</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>collection3<span class="token punctuation">,</span> item12 <span class="token operator">=&gt;</span> item12<span class="token punctuation">.</span>Item1<span class="token punctuation">.</span>Property3<span class="token punctuation">,</span> item3 <span class="token operator">=&gt;</span> item3<span class="token punctuation">.</span>Property4<span class="token punctuation">,</span> <span class="token punctuation">(</span>item12<span class="token punctuation">,</span> item3<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Item1 <span class="token operator">=</span> item12<span class="token punctuation">.</span>Item1<span class="token punctuation">,</span> Item2 <span class="token operator">=</span> item12<span class="token punctuation">.</span>Item2<span class="token punctuation">,</span> Item3 <span class="token operator">=</span> item3 <span class="token punctuation">}</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Item1<span class="token punctuation">.</span>Collection4<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> item4<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Item1 <span class="token operator">=</span> item<span class="token punctuation">.</span>Item1<span class="token punctuation">,</span> Item2 <span class="token operator">=</span> item<span class="token punctuation">.</span>Item2<span class="token punctuation">,</span> Item3 <span class="token operator">=</span> item<span class="token punctuation">.</span>Item3<span class="token punctuation">,</span> Item4 <span class="token operator">=</span> item4 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>Join</code>操作符用于连接集合，<code>SelectMany</code>操作符用于将连接后的集合与另一个集合进行连接，最终返回一个新的集合。</p><ol start="2"><li>使用方法调用语法</li></ol><p>除了使用Lambda表达式实现LINQ查询外，还可以使用方法调用语法实现。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">from</span> item <span class="token keyword">in</span> collection
             <span class="token keyword">where</span> <span class="token class-name">item</span><span class="token punctuation">.</span>Property <span class="token operator">==</span> <span class="token keyword">value</span>
             <span class="token keyword">select</span> item<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用方法调用语法实现：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>Property <span class="token operator">==</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>Where</code>方法用于筛选符合条件的元素，<code>Select</code>方法用于返回符合条件的元素，最终返回一个新的集合。</p><ol start="3"><li>使用<code>let</code>关键字定义变量</li></ol><p>在LINQ查询中，可以使用<code>let</code>关键字定义变量，用于保存中间计算结果。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">from</span> item <span class="token keyword">in</span> collection
             <span class="token keyword">let</span> temp <span class="token operator">=</span> item<span class="token punctuation">.</span>Property <span class="token operator">+</span> <span class="token keyword">value</span>
             <span class="token keyword">where</span> <span class="token class-name">temp</span> <span class="token operator">&gt;</span> <span class="token number">100</span>
             <span class="token keyword">select</span> item<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，使用<code>let</code>关键字定义了一个变量<code>temp</code>，用于保存<code>item.Property</code>和<code>value</code>相加的结果。然后在<code>where</code>子句中筛选<code>temp</code>大于100的元素，最终返回符合条件的元素集合。</p><ol start="4"><li>使用<code>Cast</code>和<code>OfType</code>操作符转换类型</li></ol><p>在LINQ查询中，可以使用<code>Cast</code>和<code>OfType</code>操作符将集合中的元素转换为指定类型。<code>Cast</code>操作符将集合中的元素强制转换为指定类型，如果元素类型与指定类型不兼容，则会抛出异常；<code>OfType</code>操作符只返回指定类型的元素，如果元素类型与指定类型不兼容，则会被忽略。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DerivedType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result2 <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DerivedType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,60),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Linq.html.vue"]]);export{d as default};
