const t=JSON.parse('{"key":"v-a73fdb50","path":"/kotlin/reflex.html","title":"反射","lang":"zh-CN","frontmatter":{"description":"简单使用反射技术 在Kotlin中，你可以使用反射来动态地获取、操作和调用类、函数和属性等程序实体的信息。反射可以在运行时检查和修改代码结构，使得你可以进行一些高级的编程技术，例如依赖注入、配置文件解析和动态扩展等。 下面是在Kotlin中使用反射的一些基本用法： 1. 获取类的引用： ```kotlin val clazz = MyClass::cl...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/kotlin/reflex.html"}],["meta",{"property":"og:site_name","content":"Entity的个人博客-分享编程经验"}],["meta",{"property":"og:title","content":"反射"}],["meta",{"property":"og:description","content":"简单使用反射技术 在Kotlin中，你可以使用反射来动态地获取、操作和调用类、函数和属性等程序实体的信息。反射可以在运行时检查和修改代码结构，使得你可以进行一些高级的编程技术，例如依赖注入、配置文件解析和动态扩展等。 下面是在Kotlin中使用反射的一些基本用法： 1. 获取类的引用： ```kotlin val clazz = MyClass::cl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-12T09:54:46.000Z"}],["meta",{"property":"article:author","content":"Entity"}],["meta",{"property":"article:modified_time","content":"2023-06-12T09:54:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-12T09:54:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Entity\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"简单使用反射技术","slug":"简单使用反射技术","link":"#简单使用反射技术","children":[]}],"git":{"createdTime":1686563686000,"updatedTime":1686563686000,"contributors":[{"name":"Entity-Now","email":"2966388213@qq.com","commits":1}]},"readingTime":{"minutes":1.03,"words":310},"filePathRelative":"kotlin/reflex.md","localizedDate":"2023年6月12日","autoDesc":true}');export{t as data};
