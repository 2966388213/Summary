import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as t,a as l}from"./app-9489f151.js";const a={},o=l('<h1 id="html-资源加载" tabindex="-1"><a class="header-anchor" href="#html-资源加载" aria-hidden="true">#</a> html 资源加载</h1><h2 id="preload-prefetch" tabindex="-1"><a class="header-anchor" href="#preload-prefetch" aria-hidden="true">#</a> preload/prefetch</h2><h6 id="preload-prefetch两者是以-link-rel-preload-和-link-rel-prefetch-作为引入方式-其主要作用和区别如下" tabindex="-1"><a class="header-anchor" href="#preload-prefetch两者是以-link-rel-preload-和-link-rel-prefetch-作为引入方式-其主要作用和区别如下" aria-hidden="true">#</a> preload/prefetch两者是以<code>&lt;link rel=&quot;preload&quot;&gt;</code> 和 <code>&lt;link rel=&quot;prefetch&quot;&gt;</code>作为引入方式，其主要作用和区别如下</h6><ol><li>preload：基本的用法是提前加载资源，告诉浏览器预先请求当前页需要的资源，从而提高这些资源的请求优先级，加载但是不运行，占用浏览器对同一个域名的并发数。</li><li>prefetch：基本用法是浏览器会在空闲的时候，下载资源并缓存起来。当有页面使用的时候，直接从缓存中读取。其实就是把决定是否和什么时间加载这个资源的决定权交给浏览器。</li></ol>',4),h=[o];function c(d,i){return r(),t("div",null,h)}const f=e(a,[["render",c],["__file","html_preload_prefetch.html.vue"]]);export{f as default};
