import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-f6611fe2.js";const o={},l=e(`<h1 id="sql-特殊语法" tabindex="-1"><a class="header-anchor" href="#sql-特殊语法" aria-hidden="true">#</a> sql 特殊语法</h1><h2 id="操作符号" tabindex="-1"><a class="header-anchor" href="#操作符号" aria-hidden="true">#</a> 操作符号</h2><p>存储过程中常用的操作符号包括：</p><ol><li><strong>等于：</strong> <code>=</code></li><li><strong>不等于：</strong> <code>!=</code> 或 <code>&lt;&gt;</code></li><li><strong>大于：</strong> <code>&gt;</code></li><li><strong>小于：</strong> <code>&lt;</code></li><li><strong>大于等于：</strong> <code>&gt;=</code></li><li><strong>小于等于：</strong> <code>&lt;=</code></li><li><strong>逻辑与：</strong> <code>AND</code></li><li><strong>逻辑或：</strong> <code>OR</code></li><li><strong>逻辑非：</strong> <code>NOT</code></li><li><strong>模糊匹配：</strong> <code>LIKE</code></li><li><strong>通配符：</strong> <code>%</code>（在 <code>LIKE</code> 中使用）</li><li><strong>IN运算符：</strong> 用于指定条件范围，例如 <code>IN (value1, value2, ...)</code></li></ol><p>这些操作符可以在存储过程的查询语句中使用，以构建复杂的条件来过滤、排序或连接数据。</p><h2 id="row-count" tabindex="-1"><a class="header-anchor" href="#row-count" aria-hidden="true">#</a> ROW_COUNT()</h2><p><code>ROW_NUMBER()</code> 和 <code>ROW_COUNT()</code> 是两个不同的 SQL 中的概念，分别用于执行不同的任务。</p><ol><li><p><strong>ROW_NUMBER():</strong></p><ul><li><code>ROW_NUMBER()</code> 是一个窗口函数，用于为查询结果集中的每一行分配一个唯一的行号。</li><li>通常与 <code>OVER</code> 子句结合使用，以定义窗口和排序规则。</li><li>用于产生行号，用于排序和分析数据，特别是在需要标识结果集中行的顺序时。</li><li>示例：<code>ROW_NUMBER() OVER (ORDER BY column1) AS row_num</code></li></ul></li><li><p><strong>ROW_COUNT():</strong></p><ul><li><code>ROW_COUNT()</code> 是一个函数，用于返回最后一个执行的 SQL 语句受影响的行数。</li><li>通常用于获取最近一次 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 语句影响的行数。</li><li>与特定表或窗口无关，而是与最近一次 SQL 语句的执行结果有关。</li><li>示例：<code>SELECT * FROM table_name; SELECT ROW_COUNT();</code></li></ul></li></ol><p>总的来说，<code>ROW_NUMBER()</code> 是一个用于为查询结果集中的每一行分配行号的窗口函数，而 <code>ROW_COUNT()</code> 是一个用于获取最近一次 SQL 语句影响的行数的函数。它们在功能和用途上有很大的区别。</p><h2 id="case" tabindex="-1"><a class="header-anchor" href="#case" aria-hidden="true">#</a> CASE</h2><p><code>CASE</code> 在 SQL 中有多种用法，主要用于条件性的逻辑判断和返回不同的结果。以下是一些常见的 <code>CASE</code> 语句的用法：</p><ol><li><p><strong>简单 CASE 表达式</strong>：用于对单个表达式进行等值比较，类似于多个 <code>IF-THEN</code> 语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span> expression
   <span class="token keyword">WHEN</span> value1 <span class="token keyword">THEN</span> result1
   <span class="token keyword">WHEN</span> value2 <span class="token keyword">THEN</span> result2
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token keyword">ELSE</span> result_else
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>搜索 CASE 表达式</strong>：用于对多个条件进行逐一判断，类似于多个 <code>IF-THEN-ELSE</code> 语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span>
   <span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> result1
   <span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> result2
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token keyword">ELSE</span> result_else
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>CASE 后带聚合函数</strong>：可以在 <code>CASE</code> 语句内使用聚合函数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 
   ID<span class="token punctuation">,</span>
   <span class="token keyword">CASE</span> 
      <span class="token keyword">WHEN</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token string">&#39;High&#39;</span>
      <span class="token keyword">ELSE</span> <span class="token string">&#39;Low&#39;</span>
   <span class="token keyword">END</span> <span class="token keyword">AS</span> QuantityStatus
<span class="token keyword">FROM</span> TableName
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>CASE 用于更新数据</strong>：可以在 <code>UPDATE</code> 语句中使用 <code>CASE</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> TableName
<span class="token keyword">SET</span> <span class="token keyword">Status</span> <span class="token operator">=</span> 
   <span class="token keyword">CASE</span> 
      <span class="token keyword">WHEN</span> Condition1 <span class="token keyword">THEN</span> <span class="token string">&#39;Active&#39;</span>
      <span class="token keyword">WHEN</span> Condition2 <span class="token keyword">THEN</span> <span class="token string">&#39;Inactive&#39;</span>
      <span class="token keyword">ELSE</span> <span class="token string">&#39;Unknown&#39;</span>
   <span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些是 <code>CASE</code> 语句的一些常见用法，可以根据具体情况选择合适的形式来进行条件判断和结果返回。</p><h2 id="union" tabindex="-1"><a class="header-anchor" href="#union" aria-hidden="true">#</a> UNION</h2><p><code>UNION</code> 是 SQL 中用于合并两个或多个 <code>SELECT</code> 语句的结果集的操作符。它的一般语法为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">WHERE</span> condition
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table2
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一些常见的 <code>UNION</code> 的用法：</p><ol><li><p><strong>合并两个表的结果集</strong>：将两个表的结果集合并成一个结果集。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>去重合并</strong>：<code>UNION</code> 会自动去除重复的行，如果你想保留重复行，可以使用 <code>UNION ALL</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>条件合并</strong>：在每个 <code>SELECT</code> 语句中使用不同的条件。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1 <span class="token keyword">WHERE</span> condition1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table2 <span class="token keyword">WHERE</span> condition2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>合并不同数据类型</strong>：<code>UNION</code> 要求两个 <code>SELECT</code> 语句的列数和数据类型必须一致，如果需要合并不同数据类型，可以使用 <code>CAST</code> 或 <code>CONVERT</code> 函数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span>column3 <span class="token keyword">AS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">)</span><span class="token punctuation">,</span> column4 <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多个表的合并</strong>：可以使用多个 <code>UNION</code> 运算符合并多个表的结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table2
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些是 <code>UNION</code> 操作符的一些常见用法，根据具体需求选择适当的方式。</p>`,19),c=[l];function d(i,t){return s(),a("div",null,c)}const u=n(o,[["render",d],["__file","index.html.vue"]]);export{u as default};
