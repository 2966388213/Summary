import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p,a as t}from"./app-dd0e30de.js";const e={},o=t(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>    <span class="token comment">// start </span>
    <span class="token comment">// 安装ts</span>
    npm install <span class="token operator">-</span>g typescript
    <span class="token comment">// 编译</span>
    tsc 文件<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-type" tabindex="-1"><a class="header-anchor" href="#类型-type" aria-hidden="true">#</a> 类型 type</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;auto type&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;string type&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">c</span> <span class="token operator">:</span> any <span class="token operator">=</span> <span class="token string">&quot;any type&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 数组</span>
    <span class="token keyword">let</span> <span class="token literal-property property">arr1</span><span class="token operator">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span>Array<span class="token operator">&lt;</span>Number<span class="token operator">&gt;</span> <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 元组 Tuple , 可以指定不同的类型</span>
    <span class="token keyword">let</span> <span class="token literal-property property">tuple</span> <span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span>number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 枚举 enum</span>
    <span class="token keyword">enum</span> Color<span class="token punctuation">{</span>
        red<span class="token punctuation">,</span>
        pink<span class="token punctuation">,</span>
        black <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
        green<span class="token punctuation">,</span>
        yellow <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">,</span>
        blue
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token literal-property property">color</span> <span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">;</span>

    <span class="token comment">// 空值</span>
    <span class="token keyword">function</span> <span class="token function">result_void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
        <span class="token comment">// 返回值为空</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 类型推断</span>
    <span class="token keyword">let</span> <span class="token literal-property property">someValue</span> <span class="token operator">:</span> any <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token literal-property property">strLength</span> <span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// or</span>
    <span class="token keyword">let</span> <span class="token literal-property property">strLength2</span> <span class="token operator">:</span> number <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// 使用 let 代替 var （var的作用域很复杂 所以尽量使用let）</span>

    <span class="token comment">// const 常量 ，赋值以后不能再被改变</span>
    <span class="token comment">// 任何不更改值的变量都应该使用const</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构数组" tabindex="-1"><a class="header-anchor" href="#解构数组" aria-hidden="true">#</a> 解构数组</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解构</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 参数当解构</span>
<span class="token keyword">function</span> <span class="token function">tuple</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>first <span class="token punctuation">,</span> last<span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">[</span>number <span class="token punctuation">,</span> string<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first <span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123 123</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>first <span class="token punctuation">,</span> last<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 只取想要的数据，忽略</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>data1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 留空则忽略不想要的数据</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>data2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 使用展开语法</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token operator">...</span>data3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tuple</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [ 123, &#39;123&#39; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构对象" tabindex="-1"><a class="header-anchor" href="#解构对象" aria-hidden="true">#</a> 解构对象</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 解构对象</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span> <span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span> <span class="token operator">:</span> <span class="token number">123</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解构yi需要用括号括起来</span>
<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa bbb</span>

<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">aa</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 使用展开语法收纳多余的属性</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> aa<span class="token punctuation">,</span> <span class="token operator">...</span>passthrough <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span>passthrough<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output foo { b: 12, c: &#39;bar&#39; }</span>

<span class="token comment">// 给属性不同的名字, 展开语法不能有别名</span>
<span class="token comment">// 这里冒号后面的不是类型而是别名</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">aa</span> <span class="token operator">:</span> test<span class="token punctuation">,</span><span class="token operator">...</span>pass<span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output foo { b: 12, c: &#39;bar&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// byName = 别名</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span> <span class="token operator">:</span> byName<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构与默认值" tabindex="-1"><a class="header-anchor" href="#解构与默认值" aria-hidden="true">#</a> 解构与默认值</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认值</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span> <span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 函数声明</span>
type <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span>string<span class="token punctuation">,</span>b<span class="token operator">?</span> <span class="token operator">:</span> number<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a <span class="token punctuation">,</span> b<span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token constant">C</span></span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
    <span class="token comment">// ....</span>
<span class="token punctuation">}</span>
<span class="token comment">// 指定默认值</span>
<span class="token keyword">function</span> <span class="token function">funcTwo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a <span class="token punctuation">,</span> b<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ....</span>
<span class="token punctuation">}</span>
<span class="token function">funcTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok,default to {a:&#39;&#39;,b:0};</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function c(l,i){return s(),a("div",null,[p(`
 * @作者: 14770137
 * @Date: 2022-10-06 16:19:54
`),o])}const k=n(e,[["render",c],["__file","index.html.vue"]]);export{k as default};
