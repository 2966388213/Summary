import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-7944a742.js";const t={},p=e(`<h1 id="reactiveui-c-mvvm库" tabindex="-1"><a class="header-anchor" href="#reactiveui-c-mvvm库" aria-hidden="true">#</a> ReactiveUI C# MVVM库</h1><h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h2><p>ReactiveUI.Blazor 在 Blazor 中的状态管理实现是通过利用 ReactiveUI 的功能来处理状态管理和反应式编程。以下是具体的实现方式：</p><ol><li><p><strong>创建 ViewModel</strong>： 在 ReactiveUI 中，ViewModel 是状态管理的核心部分。你可以创建一个继承自 <code>ReactiveObject</code> 的 ViewModel，并使用 <code>ReactiveCommand</code> 来处理用户交互。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">ReactiveUI</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reactive</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleViewModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ReactiveObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _name<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">RaiseAndSetIfChanged</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">ReactiveCommand<span class="token punctuation">&lt;</span>Unit<span class="token punctuation">,</span> Unit<span class="token punctuation">&gt;</span></span> SubmitCommand <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">SimpleViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        SubmitCommand <span class="token operator">=</span> ReactiveCommand<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* Your logic here */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在 Blazor 组件中绑定 ViewModel</strong>： 将 ViewModel 注入到 Blazor 组件中，并绑定 ViewModel 的属性和命令到组件的 UI 元素。</p><div class="language-razor line-numbers-mode" data-ext="razor"><pre class="language-razor"><code><span class="token directive"><span class="token keyword">@page</span> <span class="token csharp language-csharp"><span class="token string">&quot;/simple&quot;</span></span></span>
<span class="token directive"><span class="token keyword">@using</span> <span class="token csharp language-csharp">ReactiveUI<span class="token punctuation">.</span>Blazor</span></span>
<span class="token directive"><span class="token keyword">@inject</span> <span class="token csharp language-csharp">SimpleViewModel ViewModel</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditForm</span> <span class="token attr-name">Model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value variable"><span class="token keyword">@</span><span class="token csharp language-csharp">ViewModel</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataAnnotationsValidator</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ValidationSummary</span> <span class="token punctuation">/&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputText</span> <span class="token attr-name">@bind-Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ViewModel.Name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ViewModel.SubmitCommand.Execute<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EditForm</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在 Blazor 项目中注册 ViewModel</strong>： 在 <code>Program.cs</code> 中注册 ViewModel，以便在 Blazor 组件中进行依赖注入。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>WebAssembly<span class="token punctuation">.</span>Hosting</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebAssemblyHostBuilder<span class="token punctuation">.</span><span class="token function">CreateDefault</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>RootComponents<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>App<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SimpleViewModel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>通过这种方式，ReactiveUI.Blazor 能够在 Blazor 中实现状态管理，使得你可以利用 ReactiveUI 的强大功能来处理复杂的状态逻辑和反应式编程。</p><h2 id="whenanyvalue" tabindex="-1"><a class="header-anchor" href="#whenanyvalue" aria-hidden="true">#</a> WhenAnyValue</h2><p><code>WhenAnyValue</code> 是 ReactiveUI 中的一个扩展方法，用于监测属性值的变化。与 <code>WhenAny</code> 相比，<code>WhenAnyValue</code> 更加简洁，并且在大多数情况下更为常用，因为它不需要知道属性变化的发送者或表达式。</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p><code>WhenAnyValue</code> 主要用于监测单个或多个属性的变化，并在属性变化时执行相应的逻辑。它通过订阅属性的变化事件来实现这一点，并且在订阅时会立即提供当前的属性值。</p><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h3><p>下面是一些基本的使用示例：</p><h4 id="监测单个属性的变化" tabindex="-1"><a class="header-anchor" href="#监测单个属性的变化" aria-hidden="true">#</a> 监测单个属性的变化</h4><p>你可以使用 <code>WhenAnyValue</code> 来监测单个属性的变化，并在属性变化时执行相应的操作：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>newValue <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;SomeProperty changed to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newValue</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="监测多个属性的变化" tabindex="-1"><a class="header-anchor" href="#监测多个属性的变化" aria-hidden="true">#</a> 监测多个属性的变化</h4><p>你也可以监测多个属性的变化，并在任意一个属性变化时执行相应的操作：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>
    x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Property1<span class="token punctuation">,</span>
    x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Property2<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>prop1<span class="token punctuation">,</span> prop2<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> prop1<span class="token punctuation">,</span> prop2 <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Property1: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>prop1</span><span class="token punctuation">}</span></span><span class="token string">, Property2: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>prop2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><p>以下是一个具体的示例，展示了如何在 ViewModel 中使用 <code>WhenAnyValue</code>：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ReactiveObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _name<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">RaiseAndSetIfChanged</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> _age<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">RaiseAndSetIfChanged</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _age<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">MyViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>newName <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name changed to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>newAge <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Age changed to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newAge</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当 <code>Name</code> 或 <code>Age</code> 属性发生变化时，会输出属性的新值。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><code>WhenAnyValue</code> 是一个非常有用的工具，用于监测属性的变化并执行相应的逻辑。它简化了属性变化的监测过程，并且在大多数情况下比 <code>WhenAny</code> 更加直观和易于使用。</p><h2 id="observableaspropertyhelper" tabindex="-1"><a class="header-anchor" href="#observableaspropertyhelper" aria-hidden="true">#</a> ObservableAsPropertyHelper</h2><p><code>ObservableAsPropertyHelper&lt;T&gt;</code> 是 ReactiveUI 中的一个重要工具，用于将 <code>Observable&lt;T&gt;</code> 转换为视图模型中的属性。它的主要作用和使用方法如下：</p><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h3><p><code>ObservableAsPropertyHelper&lt;T&gt;</code> 代表了一个 <code>Observable&lt;T&gt;</code>，即随时间变化的值流。它可以将这些值视为事件，并将新值视为事件参数。通常用于以下场景：</p><ol><li><strong>输出属性</strong>：将 <code>Observable</code> 转换为视图模型属性，使得属性的值由 <code>Observable</code> 决定。这些属性通常是只读的。</li><li><strong>通知观察者</strong>：在不需要视图和视图模型之间进行双向绑定的情况下，使用 <code>ObservableAsPropertyHelper</code> 可以通知观察者视图模型中只读值的变化。</li></ol><h3 id="使用方法-1" tabindex="-1"><a class="header-anchor" href="#使用方法-1" aria-hidden="true">#</a> 使用方法</h3><h4 id="声明输出属性" tabindex="-1"><a class="header-anchor" href="#声明输出属性" aria-hidden="true">#</a> 声明输出属性</h4><p>首先，我们需要声明一个输出属性，使用 <code>ObservableAsPropertyHelper&lt;T&gt;</code> 类：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ObservableAsPropertyHelper<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> firstName<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token operator">=&gt;</span> firstName<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化输出属性" tabindex="-1"><a class="header-anchor" href="#初始化输出属性" aria-hidden="true">#</a> 初始化输出属性</h4><p>然后，我们需要在视图模型的构造函数中初始化这个输出属性。通常，我们会使用 <code>WhenAnyValue</code> 或其他 <code>Observable</code> 来设置输出属性的值：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token function">MyViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token keyword">out</span> firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>WhenAnyValue</code> 用于监测 <code>SomeProperty</code> 的变化，并将其值更新到 <code>FirstName</code> 输出属性。</p><h3 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1" aria-hidden="true">#</a> 示例代码</h3><p>以下是一个具体的示例，展示了如何在视图模型中使用 <code>ObservableAsPropertyHelper&lt;T&gt;</code>：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ReactiveObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ObservableAsPropertyHelper<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token operator">=&gt;</span> firstName<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> someProperty<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> SomeProperty
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=&gt;</span> someProperty<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">RaiseAndSetIfChanged</span><span class="token punctuation">(</span><span class="token keyword">ref</span> someProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">MyViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAnyValue</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> <span class="token keyword">out</span> firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，当 <code>SomeProperty</code> 发生变化时，<code>FirstName</code> 输出属性会自动更新。</p><h3 id="性能注意事项" tabindex="-1"><a class="header-anchor" href="#性能注意事项" aria-hidden="true">#</a> 性能注意事项</h3><p>需要注意的是，如果你使用的是不可变集合，每次更新时创建一个新集合会降低性能。在这种情况下，建议使用 DynamicData 来处理集合的变化。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p><code>ObservableAsPropertyHelper&lt;T&gt;</code> 是一个强大的工具，用于将 <code>Observable</code> 转换为视图模型中的属性，使得属性的值由 <code>Observable</code> 决定。它在创建只读输出属性和通知观察者视图模型中只读值的变化方面非常有用。</p><h2 id="whenany" tabindex="-1"><a class="header-anchor" href="#whenany" aria-hidden="true">#</a> WhenAny</h2><p><code>WhenAny</code> 是 ReactiveUI 中的一组扩展方法，它允许你在对象上的属性发生变化时获得通知。以下是 <code>WhenAny</code> 在 ViewModel 中监测属性变化的具体方式：</p><ol><li><p><strong>基本用法</strong>： <code>WhenAny</code> 可以监测单个或多个属性的变化，并在属性变化时触发相应的逻辑。它将传递一个 <code>ObservedChange</code> 对象，该对象暴露了以下属性：</p><ul><li><code>Value</code>：更新后的值</li><li><code>Sender</code>：属性发生变化的对象</li><li><code>Expression</code>：发生变化的表达式（通常不需要外部用户使用）</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenAny</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>ComboBox<span class="token punctuation">.</span>SelectedItem<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Subscribe</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>Sender</span><span class="token punctuation">}</span></span><span class="token string"> changed value to </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>Value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，当 <code>ComboBox.SelectedItem</code> 属性发生变化时，会输出 <code>Sender</code> 和新属性值。</p></li><li><p><strong>支持的属性类型</strong>： <code>WhenAny</code> 支持多种属性类型，包括 <code>INotifyPropertyChanged</code>、<code>DependencyProperty</code> 和 <code>BindableProperty</code>。这意味着你可以在 ViewModel 中使用常见的属性更改通知机制，如 <code>INotifyPropertyChanged</code>。</p></li><li><p><strong>冷观察者和行为语义</strong>： <code>WhenAny</code> 具有冷观察者和行为语义。这意味着它不会立即开始发出事件，直到有订阅者订阅它。</p></li><li><p><strong>声明式逻辑</strong>： <code>WhenAny</code> 允许你使用 Rx 操作符以声明式的方式组合和表达逻辑。由于在可观察上下文中对时间和异步性的优先处理，处理这些概念变得更容易。</p></li></ol><p>综上所述，<code>WhenAny</code> 是 ReactiveUI 中用于监测属性变化的强大工具，它不仅能够处理单个属性变化，还能处理多个属性变化，并且支持多种属性类型。</p><h2 id="bind和onewaybind" tabindex="-1"><a class="header-anchor" href="#bind和onewaybind" aria-hidden="true">#</a> bind和OneWayBind</h2><p><code>Bind</code> 和 <code>OneWayBind</code> 是 ReactiveUI 中用于绑定视图和视图模型的两个重要方法。它们的作用和用法如下：</p><h3 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h3><ol><li><p><strong>Bind</strong>:</p><ul><li><strong>作用</strong>：<code>Bind</code> 方法用于创建双向绑定。这意味着当视图模型的属性发生变化时，视图会自动更新，反之亦然。</li><li><strong>使用场景</strong>：适用于需要在视图和视图模型之间保持同步的场景，例如表单输入。</li></ul></li><li><p><strong>OneWayBind</strong>:</p><ul><li><strong>作用</strong>：<code>OneWayBind</code> 方法用于创建单向绑定。这意味着只有当视图模型的属性发生变化时，视图会自动更新，但视图的变化不会影响视图模型。</li><li><strong>使用场景</strong>：适用于只需要从视图模型向视图传递数据的场景，例如显示只读数据。</li></ul></li></ol><h3 id="使用方法-2" tabindex="-1"><a class="header-anchor" href="#使用方法-2" aria-hidden="true">#</a> 使用方法</h3><p>以下是 <code>Bind</code> 和 <code>OneWayBind</code> 的基本用法示例：</p><h4 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> Bind</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 假设我们有一个视图模型属性和一个视图控件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>ViewModel<span class="token punctuation">,</span> vm <span class="token operator">=&gt;</span> vm<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>SomeControl<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>SomeProperty</code> 是视图模型中的属性，<code>SomeControl.Text</code> 是视图中的控件属性。<code>Bind</code> 方法会将这两个属性进行双向绑定。</p><h4 id="onewaybind" tabindex="-1"><a class="header-anchor" href="#onewaybind" aria-hidden="true">#</a> OneWayBind</h4><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 假设我们有一个视图模型属性和一个视图控件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OneWayBind</span><span class="token punctuation">(</span>ViewModel<span class="token punctuation">,</span> vm <span class="token operator">=&gt;</span> vm<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>SomeControl<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>SomeProperty</code> 是视图模型中的属性，<code>SomeControl.Text</code> 是视图中的控件属性。<code>OneWayBind</code> 方法会将视图模型的属性单向绑定到视图控件。</p><h3 id="绑定管理" tabindex="-1"><a class="header-anchor" href="#绑定管理" aria-hidden="true">#</a> 绑定管理</h3><p>你可以使用 <code>WhenActivated</code> 方法来管理绑定的生命周期：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">WhenActivated</span><span class="token punctuation">(</span>disposables <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>ViewModel<span class="token punctuation">,</span> vm <span class="token operator">=&gt;</span> vm<span class="token punctuation">.</span>SomeProperty<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>SomeControl<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">DisposeWith</span><span class="token punctuation">(</span>disposables<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OneWayBind</span><span class="token punctuation">(</span>ViewModel<span class="token punctuation">,</span> vm <span class="token operator">=&gt;</span> vm<span class="token punctuation">.</span>AnotherProperty<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>AnotherControl<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">DisposeWith</span><span class="token punctuation">(</span>disposables<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>WhenActivated</code> 方法确保绑定在视图激活时创建，并在视图不再激活时自动清理。</p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><ul><li><strong>Bind</strong>：用于双向绑定，适用于需要视图和视图模型之间保持同步的场景。</li><li><strong>OneWayBind</strong>：用于单向绑定，适用于只需要从视图模型向视图传递数据的场景。</li></ul>`,66),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","ReactiveUI.html.vue"]]);export{d as default};
