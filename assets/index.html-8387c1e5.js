import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as e,a as o}from"./app-334129fb.js";const c={},i=o('<h1 id="syntax-tree语法树" tabindex="-1"><a class="header-anchor" href="#syntax-tree语法树" aria-hidden="true">#</a> Syntax Tree语法树</h1><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2><p>下面是一些常用的 <code>SyntaxTree</code> 类的方法和属性，以及它们的简单描述：</p><table><thead><tr><th>方法/属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Encoding</code></td><td>获取语法树对应的源代码文本的编码</td></tr><tr><td><code>FilePath</code></td><td>获取语法树对应的源代码文件路径</td></tr><tr><td><code>Options</code></td><td>获取语法树的解析选项</td></tr><tr><td><code>Length</code></td><td>获取语法树对应的源代码文本的长度</td></tr><tr><td><code>Options</code></td><td>获取语法树的解析选项</td></tr><tr><td><code>GetCompilationUnitRoot()</code></td><td>获取语法树的根节点，表示整个编译单元的语法结构</td></tr><tr><td><code>GetDiagnostics()</code></td><td>获取语法树的诊断信息，如语法错误、警告等</td></tr><tr><td><code>GetLineSpan(TextSpan)</code></td><td>获取指定文本范围的行范围</td></tr><tr><td><code>GetLocation(TextSpan)</code></td><td>获取指定文本范围的位置信息</td></tr><tr><td><code>GetMappedLineSpan(TextSpan)</code></td><td>获取指定文本范围的映射行范围</td></tr><tr><td><code>GetRoot(CancellationToken)</code></td><td>异步获取语法树的根节点</td></tr><tr><td><code>GetText(CancellationToken)</code></td><td>异步获取语法树对应的源代码文本</td></tr><tr><td><code>HasCompilationUnitRoot</code></td><td>获取一个值，指示语法树是否具有编译单元根节点</td></tr><tr><td><code>HasReferenceDirectives</code></td><td>获取一个值，指示语法树是否具有引用指令</td></tr><tr><td><code>TryGetCompilationUnitRoot(out CompilationUnitSyntax)</code></td><td>尝试获取语法树的编译单元根节点</td></tr><tr><td><code>TryGetRoot(out SyntaxNode)</code></td><td>尝试获取语法树的根节点</td></tr><tr><td><code>WithFilePath(String)</code></td><td>使用指定的文件路径创建新的语法树</td></tr><tr><td><code>WithFilePath(String, Encoding)</code></td><td>使用指定的文件路径和编码创建新的语法树</td></tr><tr><td><code>WithRootAndOptions(SyntaxNode, ParseOptions)</code></td><td>使用指定的根节点和解析选项创建新的语法树</td></tr><tr><td><code>ToString()</code></td><td>获取语法树的字符串表示</td></tr></tbody></table><p>这些方法和属性提供了对 <code>SyntaxTree</code> 对象的各种操作和信息访问的功能。你可以使用它们来获取语法树的根节点、诊断信息、源代码文本、文件路径等，还可以修改语法树的相关信息以及创建新的语法树。</p><p>这些方法和属性提供了对 <code>SyntaxTree</code> 对象的基本操作和信息访问。例如，<code>GetCompilationUnitRoot()</code> 方法可以用于获取整个编译单元的语法结构，<code>GetDiagnostics()</code> 方法可以用于获取语法树中的诊断信息，<code>GetText()</code> 方法可以获取语法树对应的源代码文本等。</p><p>根据你的具体需求，你可以使用这些方法和属性来操作和获取与语法树相关的信息，并进行进一步的分析、处理或转换。</p><h3 id="syntaxtree-getroot" tabindex="-1"><a class="header-anchor" href="#syntaxtree-getroot" aria-hidden="true">#</a> SyntaxTree.GetRoot</h3><p><code>SyntaxTree.GetRoot()</code> 方法返回语法树的根节点，表示整个编译单元的语法结构。下面是 <code>GetRoot()</code> 方法返回的 <code>SyntaxNode</code> 对象的一些常用方法和属性以及它们的简单描述：</p><table><thead><tr><th>方法/属性</th><th>描述</th></tr></thead><tbody><tr><td><code>ChildNodes()</code></td><td>获取根节点的所有直接子节点</td></tr><tr><td><code>DescendantNodes()</code></td><td>获取根节点的所有子孙节点</td></tr><tr><td><code>ChildTokens()</code></td><td>获取根节点及其所有直接子节点的所有标记</td></tr><tr><td><code>DescendantTokens()</code></td><td>获取根节点及其所有子孙节点的所有标记</td></tr><tr><td><code>FindNode(TextSpan)</code></td><td>查找包含指定文本范围的节点</td></tr><tr><td><code>FindToken(Int32)</code></td><td>查找位于指定位置的标记</td></tr><tr><td><code>GetAnnotatedNodes(SyntaxAnnotation)</code></td><td>获取所有带有指定语法注释的节点</td></tr><tr><td><code>GetAnnotatedTokens(SyntaxAnnotation)</code></td><td>获取所有带有指定语法注释的标记</td></tr><tr><td><code>NormalizeWhitespace()</code></td><td>对语法树进行空白字符标准化处理</td></tr><tr><td><code>ReplaceNode(SyntaxNode, SyntaxNode)</code></td><td>用新节点替换指定节点</td></tr><tr><td><code>ReplaceToken(SyntaxToken, SyntaxToken)</code></td><td>用新标记替换指定标记</td></tr><tr><td><code>ToFullString()</code></td><td>获取根节点及其所有子节点的字符串表示</td></tr><tr><td><code>ToString()</code></td><td>获取根节点的字符串表示</td></tr></tbody></table><p>这些方法和属性可以用于遍历语法树的节点和标记，查找特定位置或范围的节点或标记，替换节点或标记，以及获取语法树的字符串表示等。</p><p>你可以根据需要使用这些方法和属性来操作语法树的节点和标记，进行分析、修改或转换。</p><h3 id="descendanttokens" tabindex="-1"><a class="header-anchor" href="#descendanttokens" aria-hidden="true">#</a> DescendantTokens</h3><p>循环遍历 <code>MethodDeclarationSyntax</code> 后，你将得到以下方法和属性。这些方法和属性是 <code>MethodDeclarationSyntax</code> 类的成员，用于访问和操作方法声明节点的相关信息。</p><p><strong>方法：</strong></p><ul><li><code>AddAttributeLists(...)</code>: 向方法声明添加一个或多个属性列表。</li><li><code>AddBodyStatements(...)</code>: 向方法声明的方法体添加一个或多个语句。</li><li><code>AddModifiers(...)</code>: 向方法声明添加一个或多个修饰符。</li><li><code>RemoveNode(...)</code>: 从方法声明中移除指定的语法节点。</li><li><code>ReplaceNode(...)</code>: 用新的语法节点替换方法声明中的指定节点。</li><li><code>WithAttributeLists(...)</code>: 使用指定的属性列表替换方法声明中的属性列表。</li><li><code>WithIdentifier(...)</code>: 使用指定的标识符替换方法声明中的标识符。</li><li><code>WithModifiers(...)</code>: 使用指定的修饰符列表替换方法声明中的修饰符。</li><li><code>WithParameterList(...)</code>: 使用指定的参数列表替换方法声明中的参数列表。</li><li><code>WithReturnType(...)</code>: 使用指定的返回类型替换方法声明中的返回类型。</li><li><code>WithSemicolonToken(...)</code>: 使用指定的分号标记替换方法声明中的分号标记。</li><li><code>WithBody(...)</code>: 使用指定的方法体替换方法声明中的方法体。</li><li><code>GetLeadingTrivia()</code>: 获取方法声明的前导 trivia。<div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>GetLeadingTrivia()</code> 方法用于获取方法声明节点的前导 trivia，即位于方法声明之前的注释、空格、换行等非语法关键部分。前导 trivia 对于识别和获取注释信息非常有用。 请注意，<code>GetLeadingTrivia()</code> 方法返回的是 <code>SyntaxTriviaList</code> 对象，而不是直接返回注释文本。你可以通过进一步处理 <code>SyntaxTriviaList</code> 对象来获取注释文本。</p></div></li></ul><p><strong>属性：</strong></p><ul><li><code>AttributeLists</code>: 获取方法声明的属性列表。</li><li><code>Body</code>: 获取或设置方法声明的方法体。</li><li><code>Identifier</code>: 获取方法声明的标识符。</li><li><code>Modifiers</code>: 获取方法声明的修饰符列表。</li><li><code>ParameterList</code>: 获取方法声明的参数列表。</li><li><code>ReturnType</code>: 获取方法声明的返回类型。</li><li><code>SemicolonToken</code>: 获取或设置方法声明的分号标记。</li></ul><p>这些方法和属性可以让你对 <code>MethodDeclarationSyntax</code> 对象进行修改、访问和查询。你可以根据具体的需求使用这些成员来操作方法声明的各个部分，例如添加修饰符、获取参数列表、替换方法体等。</p>',19),r=[i];function n(a,l){return d(),e("div",null,r)}const p=t(c,[["render",n],["__file","index.html.vue"]]);export{p as default};
