import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-4fc52280.js";const t={},e=p(`<h1 id="es6-新功能" tabindex="-1"><a class="header-anchor" href="#es6-新功能" aria-hidden="true">#</a> ES6 新功能</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>ES6（或称为 ECMAScript 2015）是 JavaScript 的一个重要版本，引入了许多新的语言特性和改进。下面是 ES6 中的一些主要更新内容：</p><ol><li><p>块级作用域：引入了 <code>let</code> 和 <code>const</code> 关键字，允许在块级作用域中声明变量，并解决了变量提升的问题。</p></li><li><p>箭头函数：使用箭头函数语法 <code>() =&gt; {}</code> 来创建匿名函数，简化了函数的书写和上下文绑定。</p></li><li><p>默认参数值：可以在函数声明中为参数设置默认值，简化了函数的调用和参数处理。</p></li><li><p>扩展运算符：使用 <code>...</code> 语法可以将数组或对象展开为独立的元素，或者将多个元素合并为数组。</p></li><li><p>解构赋值：可以从数组或对象中提取值，并赋给变量，以简化数据的处理和访问。</p></li><li><p>模板字面量：使用反引号（\`）创建模板字符串，可以在字符串中插入变量和表达式，以及多行字符串的书写。</p></li><li><p>类和模块：引入了 <code>class</code> 关键字来定义类，以及 <code>import</code> 和 <code>export</code> 关键字来进行模块的导入和导出。</p></li><li><p>Promise：提供了一种更好的处理异步操作的方式，使用 <code>Promise</code> 对象可以更方便地管理和处理异步代码。</p></li><li><p>迭代器和生成器：引入了迭代器和生成器的概念，允许自定义迭代过程和生成器函数，简化了对数据集合的操作。</p></li><li><p>模块化加载：支持通过 <code>import</code> 和 <code>export</code> 关键字来进行模块化加载和管理依赖。</p></li><li><p>箭头函数和 this：箭头函数没有自己的 <code>this</code> 绑定，它会继承外部作用域的 <code>this</code> 值，避免了传统函数中 <code>this</code> 的困惑。</p></li><li><p>新的数据类型：引入了 <code>Symbol</code> 类型用于创建唯一的标识符，以及 <code>Map</code> 和 <code>Set</code> 类型用于存储键值对和唯一值。</p></li></ol><p>这只是 ES6 中的一些主要更新内容，还有其他的语言特性和改进。ES6 提供了许多增强 JavaScript 开发的功能，使代码更简洁、可读性更高，并提供更好的开发体验。</p><h2 id="迭代器-symbol" tabindex="-1"><a class="header-anchor" href="#迭代器-symbol" aria-hidden="true">#</a> 迭代器 Symbol</h2><h3 id="symbol-iterator" tabindex="-1"><a class="header-anchor" href="#symbol-iterator" aria-hidden="true">#</a> Symbol.iterator</h3><p><code>Symbol.iterator</code> 是一个内置的 <code>Symbol</code> 值，用于定义对象的默认迭代器。迭代器是一种特殊对象，它具有 <code>next()</code> 方法，用于按照特定的规则遍历对象的元素。</p><p>当一个对象实现了 <code>Symbol.iterator</code> 方法时，它就成为一个可迭代对象（Iterable），可以使用 <code>for...of</code> 循环或其他迭代相关的功能来遍历该对象的元素。</p><p>下面是关于 <code>Symbol.iterator</code> 的详细讲解：</p><ol><li><p>可迭代对象（Iterable）：</p><p>可迭代对象是指实现了 <code>Symbol.iterator</code> 方法的对象。该方法返回一个迭代器对象（Iterator），它具有 <code>next()</code> 方法。</p></li><li><p>迭代器对象（Iterator）：</p><p>迭代器对象是一个带有 <code>next()</code> 方法的对象。每次调用 <code>next()</code> 方法都会返回一个包含两个属性的对象：<code>value</code> 和 <code>done</code>。</p><ul><li><code>value</code>：表示迭代器当前位置的值。</li><li><code>done</code>：表示迭代器是否已经遍历完所有元素，如果为 <code>true</code>，表示遍历结束；如果为 <code>false</code>，表示还有更多的元素可供遍历。</li></ul><p>迭代器对象按照特定的规则逐个返回对象的元素，并且会记录迭代的状态。</p></li><li><p>使用 <code>for...of</code> 进行迭代：</p><p>当一个对象实现了 <code>Symbol.iterator</code> 方法后，可以使用 <code>for...of</code> 循环来遍历该对象的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myIterable <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> myIterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>myIterable</code> 对象实现了 <code>Symbol.iterator</code> 方法，返回一个迭代器对象。每次调用迭代器对象的 <code>next()</code> 方法，会依次返回 <code>1</code>、<code>2</code>、<code>3</code>，直到遍历完成。</p></li><li><p>使用扩展运算符和解构赋值：</p><p>可迭代对象可以使用扩展运算符（<code>...</code>）将其展开为数组，或者可以使用解构赋值将其解构为独立的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myIterable <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> count<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>myIterable<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> myIterable<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在上述示例中，通过使用扩展运算符（<code>...</code>）将可迭代对象 <code>myIterable</code> 展开为数组，或者使用解构赋值将其解构为独立的元素，可以方便地获取可迭代对象的元素。</p><ol start="5"><li><p>内置可迭代对象：</p><p>在 JavaScript 中，许多内置的数据结构和类型已经实现了 <code>Symbol.iterator</code> 方法，使它们成为可迭代对象。这些包括字符串、数组、Set、Map 等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// H, e, l, l, o</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 1, b 2, c 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，字符串、数组、Set 和 Map 都是内置的可迭代对象，它们都可以使用 <code>for...of</code> 循环来遍历其元素。</p></li></ol><p>总结： <code>Symbol.iterator</code> 是一个内置的 <code>Symbol</code> 值，用于定义对象的默认迭代器。通过实现该方法，对象可以成为可迭代对象，从而可以使用 <code>for...of</code> 循环或其他迭代相关的功能来遍历对象的元素。可迭代对象的迭代器对象具有 <code>next()</code> 方法，用于按照特定的规则逐个返回对象的元素，并记录迭代的状态。</p><h3 id="生成器函数" tabindex="-1"><a class="header-anchor" href="#生成器函数" aria-hidden="true">#</a> 生成器函数</h3><p>生成器函数是一种特殊的函数，可以用于生成一个迭代器对象，通过迭代器对象可以按需生成序列中的值。</p><p>生成器函数使用 <code>function*</code> 声明，并在函数体内使用 <code>yield</code> 关键字来指定每次生成的值。以下是生成器函数的基本语法结构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 生成器函数体</span>
  <span class="token keyword">yield</span> value1<span class="token punctuation">;</span>
  <span class="token keyword">yield</span> value2<span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成器函数以 <code>function*</code> 声明，函数名可以根据需要进行命名。函数体内部使用 <code>yield</code> 关键字来指定生成的值。每次执行 <code>yield</code> 语句时，生成器函数会暂停执行并返回一个包含当前生成值的迭代器对象。</p><p>生成器函数返回的迭代器对象具有 <code>next()</code> 方法，可以用来获取生成器函数生成的下一个值。<code>next()</code> 方法返回一个对象，包含两个属性：<code>value</code> 和 <code>done</code>。</p><ul><li><code>value</code>：表示生成器函数生成的值。</li><li><code>done</code>：表示生成器函数是否已经生成完所有值，如果为 <code>true</code>，表示生成器函数已经结束；如果为 <code>false</code>，表示生成器函数还可以继续生成值。</li></ul><p>以下是使用生成器函数的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">generatorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建生成器函数的迭代器对象</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: &#39;Hello&#39;, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: &#39;World&#39;, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: &#39;!&#39;, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { value: undefined, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，首先通过调用 <code>generatorFunction()</code> 创建了一个生成器函数的迭代器对象 <code>generator</code>。然后，通过多次调用 <code>generator.next()</code> 方法来逐步获取生成器函数生成的值，每次调用 <code>next()</code> 方法都会暂停生成器函数的执行，并返回生成值和结束状态。</p><p>需要注意的是，生成器函数可以使用 <code>yield</code> 语句多次生成值，并且可以在需要时按需生成，而不需要一次性生成所有值。这种按需生成的特性使得生成器函数非常适用于处理大型数据集或无限序列的情况。</p><h2 id="es6-modules" tabindex="-1"><a class="header-anchor" href="#es6-modules" aria-hidden="true">#</a> ES6 Modules</h2><p>ES6 Modules 是 ECMAScript 6（ES6）引入的官方模块系统，提供了一种在 JavaScript 中进行模块化开发的方式。ES6 Modules 提供了一套语法和功能，用于定义、导入和导出模块，以实现代码的模块化组织、依赖管理和重用。</p><p>下面是 ES6 Modules 的一些特点和用法：</p><ol><li><p>导出模块：</p><ul><li>使用 <code>export</code> 关键字导出一个或多个模块成员（变量、函数、类等）。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出单个成员</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 导出多个成员</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>默认导出：</p><ul><li>使用 <code>export default</code> 关键字指定默认导出的模块成员。</li><li>一个模块只能有一个默认导出。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 默认导出一个函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;This is the default export.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>导入模块：</p><ul><li>使用 <code>import</code> 关键字导入其他模块的成员。</li><li>可以使用命名导入和默认导入。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入单个成员</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入默认成员</span>
<span class="token keyword">import</span> defaultExport <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 导入并重命名成员</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> myName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>模块重命名：</p><ul><li>在导入模块时，可以使用 <code>as</code> 关键字给导入的成员指定新的名称。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> myName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>命名空间导入：</p><ul><li>使用 <code>import * as</code> 关键字将整个模块导入到命名空间对象中，可以通过该对象访问模块的所有成员。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">&#39;./module&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>动态导入：</p><ul><li>使用 <code>import()</code> 函数进行动态导入模块。</li><li>可以根据需要异步加载模块，返回一个 Promise 对象。</li><li>示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./module&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>ES6 Modules 的模块加载是静态的，意味着在编译时就可以确定模块的依赖关系。它可以在现代浏览器中直接使用，也可以通过工具（如 Babel）进行转换以在旧版浏览器中使用。</p><p>ES6 Modules 提供了更简洁、可读性更高的语法，可以更好地组织和管理代码，减少命名冲突，并提供了更好的性能和可靠性。</p><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h3><p>动态导入（Dynamic Import）可以在模块的任何地方使用，不仅限于模块内部。它可以在任何需要异步加载模块的地方使用，无论是在模块的顶层代码、函数内部，还是在条件语句、循环中。</p><p>动态导入使用 <code>import()</code> 函数来实现，它返回一个 Promise 对象，可以使用 <code>then()</code> 方法处理导入后的模块。因为它返回的是一个 Promise，所以可以在任何支持 Promise 的上下文中使用，包括 <code>async/await</code>、<code>Promise.all()</code> 等。</p><p>以下是一些使用动态导入的示例：</p><ol><li><p>在模块的顶层代码中使用动态导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// moduleA.js</span>
<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moduleB<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在函数内部使用动态导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// moduleA.js</span>
<span class="token keyword">function</span> <span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在条件语句中使用动态导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// moduleA.js</span>
<span class="token keyword">const</span> condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">module</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 <code>async/await</code> 处理动态导入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// moduleA.js</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>总之，动态导入可以在模块的任何地方使用，使得模块的加载可以在运行时动态决定，从而提供更大的灵活性和可扩展性。无论是在模块的顶层代码，还是在函数、条件语句、循环等位置，都可以使用动态导入来异步加载模块。</p><h2 id="proxies-的用法" tabindex="-1"><a class="header-anchor" href="#proxies-的用法" aria-hidden="true">#</a> Proxies 的用法</h2><p>Proxy是ES6中引入的一种元编程特性，它提供了对对象和函数的代理访问，可以拦截并自定义对象的基本操作。Proxy可以用来创建一个代理对象，该代理对象可以在访问目标对象之前进行拦截，并可以对拦截的操作进行自定义处理。</p><p>Proxy的基本用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 目标对象</span>

<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 拦截对象属性的读取操作</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Reading property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 拦截对象属性的设置操作</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Setting property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 拦截对象属性的删除操作</span>
  <span class="token function-variable function">deleteProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Deleting property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建代理对象</span>

proxy<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Setting property: foo = Hello</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reading property: foo  // 输出: Hello</span>
<span class="token keyword">delete</span> proxy<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// Deleting property: foo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们创建了一个空对象<code>target</code>，然后使用<code>Proxy</code>构造函数创建了一个代理对象<code>proxy</code>，并传入了一个<code>handler</code>对象作为参数。<code>handler</code>对象包含了各种拦截方法，比如<code>get</code>用于拦截属性的读取操作，<code>set</code>用于拦截属性的设置操作，<code>deleteProperty</code>用于拦截属性的删除操作。当对代理对象进行操作时，会根据操作类型触发相应的拦截方法。</p><p>通过使用<code>Proxy</code>，我们可以对对象的操作进行拦截和自定义处理。这样可以实现一些高级的特性，比如数据绑定、观察者模式、属性验证等。同时，还可以实现对对象的保护，限制对某些属性的访问和修改。</p><p>需要注意的是，<code>Proxy</code>并不适用于所有场景，它增加了运行时的开销，并且在一些特殊情况下无法完全模拟目标对象的行为。因此，在使用<code>Proxy</code>时需要谨慎考虑其适用性和性能影响。</p>`,44),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","ES6.html.vue"]]);export{r as default};
