const l=JSON.parse('{"key":"v-4a3f7a35","path":"/kotlin/","title":"Kotlin基础","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"匿名函数只有一个参数时，可以用it代替","slug":"匿名函数只有一个参数时-可以用it代替","link":"#匿名函数只有一个参数时-可以用it代替","children":[{"level":3,"title":"匿名函数类型推断，大大减少代码量","slug":"匿名函数类型推断-大大减少代码量","link":"#匿名函数类型推断-大大减少代码量","children":[]},{"level":3,"title":"匿名函数就是Lambda#","slug":"匿名函数就是lambda","link":"#匿名函数就是lambda","children":[]},{"level":3,"title":"当函数参数是lambda时","slug":"当函数参数是lambda时","link":"#当函数参数是lambda时","children":[]}]},{"level":2,"title":"内联函数 inline","slug":"内联函数-inline","link":"#内联函数-inline","children":[]},{"level":2,"title":"当返回类型为Lambda时","slug":"当返回类型为lambda时","link":"#当返回类型为lambda时","children":[{"level":3,"title":"可空类型，var str:String? = \\"\\";","slug":"可空类型-var-str-string","link":"#可空类型-var-str-string","children":[]},{"level":3,"title":"安全调用操作符","slug":"安全调用操作符","link":"#安全调用操作符","children":[]},{"level":3,"title":"可空类型使用let函数","slug":"可空类型使用let函数","link":"#可空类型使用let函数","children":[]},{"level":3,"title":"非空运算符，!!.","slug":"非空运算符","link":"#非空运算符","children":[]},{"level":3,"title":"合并操作符，相当于C#的三元表达式 ? :","slug":"合并操作符-相当于c-的三元表达式","link":"#合并操作符-相当于c-的三元表达式","children":[]},{"level":3,"title":"自定义异常，继承exception","slug":"自定义异常-继承exception","link":"#自定义异常-继承exception","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"检测参数是否为空，如果为空发出自定义异常","slug":"检测参数是否为空-如果为空发出自定义异常","link":"#检测参数是否为空-如果为空发出自定义异常","children":[]},{"level":3,"title":"解构语法，把list赋值给变量","slug":"解构语法-把list赋值给变量","link":"#解构语法-把list赋值给变量","children":[]},{"level":3,"title":"replace（字符串替换） + regex（正则表达式）","slug":"replace-字符串替换-regex-正则表达式","link":"#replace-字符串替换-regex-正则表达式","children":[]},{"level":3,"title":"== and ===","slug":"and","link":"#and","children":[]},{"level":3,"title":"字符串遍历","slug":"字符串遍历","link":"#字符串遍历","children":[]},{"level":3,"title":"数字转换","slug":"数字转换","link":"#数字转换","children":[]},{"level":3,"title":"apply函数，在apply里面调用类的方法时无需使用变量名","slug":"apply函数-在apply里面调用类的方法时无需使用变量名","link":"#apply函数-在apply里面调用类的方法时无需使用变量名","children":[]},{"level":3,"title":"let and apply","slug":"let-and-apply","link":"#let-and-apply","children":[]},{"level":3,"title":"run函数","slug":"run函数","link":"#run函数","children":[]},{"level":3,"title":"with and run","slug":"with-and-run","link":"#with-and-run","children":[]},{"level":3,"title":"also","slug":"also","link":"#also","children":[]},{"level":3,"title":"takeif","slug":"takeif","link":"#takeif","children":[]},{"level":3,"title":"takeUnless ,  是takeif的辅助函数，takeif为真时返回对象，而takeunless为假时返回对象","slug":"takeunless-是takeif的辅助函数-takeif为真时返回对象-而takeunless为假时返回对象","link":"#takeunless-是takeif的辅助函数-takeif为真时返回对象-而takeunless为假时返回对象","children":[]},{"level":3,"title":"list集合","slug":"list集合","link":"#list集合","children":[]},{"level":3,"title":"mutableLIst","slug":"mutablelist","link":"#mutablelist","children":[]},{"level":3,"title":"mutator","slug":"mutator","link":"#mutator","children":[]},{"level":3,"title":"遍历列表","slug":"遍历列表","link":"#遍历列表","children":[]},{"level":3,"title":"解构语法忽略赋值","slug":"解构语法忽略赋值","link":"#解构语法忽略赋值","children":[]},{"level":3,"title":"SetList 不可变Set集合","slug":"setlist-不可变set集合","link":"#setlist-不可变set集合","children":[]},{"level":3,"title":"MutableSetList  可变Set集合","slug":"mutablesetlist-可变set集合","link":"#mutablesetlist-可变set集合","children":[]},{"level":3,"title":"集合转换， 快捷函数","slug":"集合转换-快捷函数","link":"#集合转换-快捷函数","children":[]},{"level":3,"title":"mapList","slug":"maplist","link":"#maplist","children":[]},{"level":3,"title":"field ， 类属性自定义get / set时使用","slug":"field-类属性自定义get-set时使用","link":"#field-类属性自定义get-set时使用","children":[]},{"level":3,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":3,"title":"调用上面的类","slug":"调用上面的类","link":"#调用上面的类","children":[]},{"level":3,"title":"类属性，给类属性赋值，使用field","slug":"类属性-给类属性赋值-使用field","link":"#类属性-给类属性赋值-使用field","children":[]},{"level":3,"title":"可见性修饰符","slug":"可见性修饰符","link":"#可见性修饰符","children":[]},{"level":3,"title":"延迟初始化，lateinit","slug":"延迟初始化-lateinit","link":"#延迟初始化-lateinit","children":[]},{"level":3,"title":"惰性加载","slug":"惰性加载","link":"#惰性加载","children":[]},{"level":3,"title":"is 和 as","slug":"is-和-as","link":"#is-和-as","children":[]},{"level":3,"title":"不安全的转换","slug":"不安全的转换","link":"#不安全的转换","children":[]},{"level":3,"title":"安全转换","slug":"安全转换","link":"#安全转换","children":[]},{"level":3,"title":"与C#的 as 不同","slug":"与c-的-as-不同","link":"#与c-的-as-不同","children":[]},{"level":3,"title":"匿名对象，objcet","slug":"匿名对象-objcet","link":"#匿名对象-objcet","children":[]},{"level":3,"title":"声明一个对象","slug":"声明一个对象","link":"#声明一个对象","children":[]},{"level":3,"title":"companion半生对象，像是其他语言的static","slug":"companion半生对象-像是其他语言的static","link":"#companion半生对象-像是其他语言的static","children":[]},{"level":3,"title":"data class 数据类","slug":"data-class-数据类","link":"#data-class-数据类","children":[]},{"level":3,"title":"复制 data class","slug":"复制-data-class","link":"#复制-data-class","children":[]},{"level":3,"title":"operator - 运算符重载，类本身不支持 + += - -=","slug":"operator-运算符重载-类本身不支持","link":"#operator-运算符重载-类本身不支持","children":[]},{"level":3,"title":"但是可以重载运算符","slug":"但是可以重载运算符","link":"#但是可以重载运算符","children":[]},{"level":3,"title":"enum 枚举","slug":"enum-枚举","link":"#enum-枚举","children":[]},{"level":3,"title":"初始化枚举","slug":"初始化枚举","link":"#初始化枚举","children":[]},{"level":3,"title":"枚举方法","slug":"枚举方法","link":"#枚举方法","children":[]},{"level":3,"title":"sealed - 密封类，某种意义上来说是enum的拓展","slug":"sealed-密封类-某种意义上来说是enum的拓展","link":"#sealed-密封类-某种意义上来说是enum的拓展","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"多参数vararg,  C#里面的param","slug":"多参数vararg-c-里面的param","link":"#多参数vararg-c-里面的param","children":[]},{"level":3,"title":"协变 out， 逆变in","slug":"协变-out-逆变in","link":"#协变-out-逆变in","children":[]},{"level":3,"title":"协变 逆变在array中使用","slug":"协变-逆变在array中使用","link":"#协变-逆变在array中使用","children":[]},{"level":3,"title":"判断 泛型类型 reified ， 使用reified必须使用 inline","slug":"判断-泛型类型-reified-使用reified必须使用-inline","link":"#判断-泛型类型-reified-使用reified必须使用-inline","children":[]},{"level":3,"title":"函数式接口 fun interface","slug":"函数式接口-fun-interface","link":"#函数式接口-fun-interface","children":[]},{"level":3,"title":"拓展函数","slug":"拓展函数","link":"#拓展函数","children":[]},{"level":3,"title":"inner 内部类","slug":"inner-内部类","link":"#inner-内部类","children":[]},{"level":3,"title":"委托类 使用 by关键字","slug":"委托类-使用-by关键字","link":"#委托类-使用-by关键字","children":[]},{"level":3,"title":"懒加载，lazy配合 委托使用","slug":"懒加载-lazy配合-委托使用","link":"#懒加载-lazy配合-委托使用","children":[]},{"level":3,"title":"委托， 映射类，通过字符串键属性名称","slug":"委托-映射类-通过字符串键属性名称","link":"#委托-映射类-通过字符串键属性名称","children":[]}]}],"git":{"updatedTime":1686021323000,"contributors":[{"name":"Entity-Now","email":"2966388213@qq.com","commits":1}]},"filePathRelative":"kotlin/README.md"}');export{l as data};
