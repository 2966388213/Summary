import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-13faa0d0.js";const t={},p=e(`<h1 id="sam-函数式接口" tabindex="-1"><a class="header-anchor" href="#sam-函数式接口" aria-hidden="true">#</a> SAM 函数式接口</h1><h2 id="简单介绍" tabindex="-1"><a class="header-anchor" href="#简单介绍" aria-hidden="true">#</a> 简单介绍</h2><p>在 Kotlin 中，函数式接口是指只有一个抽象方法的接口，它们被用于支持函数式编程风格和 lambda 表达式。</p><p>Kotlin 提供了一些函数式接口，其中最常用的是函数类型（Function Types）。函数类型本身就是函数式接口，具有单个抽象方法。函数类型的形式取决于参数和返回类型的数量和类型。</p><p>以下是一些常见的函数类型和它们对应的函数式接口：</p><ol><li><p><code>(A) -&gt; R</code>: 表示接受一个参数类型为 <code>A</code>，返回类型为 <code>R</code> 的函数。</p><p>对应的函数式接口是 <code>Function1&lt;A, R&gt;</code>。</p></li><li><p><code>(A, B) -&gt; R</code>: 表示接受两个参数类型为 <code>A</code> 和 <code>B</code>，返回类型为 <code>R</code> 的函数。</p><p>对应的函数式接口是 <code>Function2&lt;A, B, R&gt;</code>。</p></li><li><p><code>() -&gt; R</code>: 表示无参数，返回类型为 <code>R</code> 的函数。</p><p>对应的函数式接口是 <code>Function0&lt;R&gt;</code>。</p></li></ol><p>在使用函数类型时，可以通过 lambda 表达式来创建函数对象，从而传递行为。</p><p>以下是一个示例，展示了如何使用函数类型和 lambda 表达式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token keyword">interface</span> Calculator <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> addition<span class="token operator">:</span> Calculator <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>
    <span class="token keyword">val</span> subtraction<span class="token operator">:</span> Calculator <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span> a <span class="token operator">-</span> b <span class="token punctuation">}</span>

    <span class="token keyword">val</span> result1 <span class="token operator">=</span> addition<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;5 + 3 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result1</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出：5 + 3 = 8</span>

    <span class="token keyword">val</span> result2 <span class="token operator">=</span> subtraction<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;10 - 4 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result2</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 输出：10 - 4 = 6</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们定义了一个函数式接口 <code>Calculator</code>，它具有单个抽象方法 <code>calculate()</code>。然后，我们使用 lambda 表达式创建了两个函数对象 <code>addition</code> 和 <code>subtraction</code>，分别表示加法和减法操作。</p><p>通过函数对象，我们可以调用 <code>calculate()</code> 方法来执行相应的操作。在 <code>main()</code> 函数中，我们分别调用 <code>addition.calculate(5, 3)</code> 和 <code>subtraction.calculate(10, 4)</code>，并打印出结果。</p><p>这样，我们就可以通过函数类型和 lambda 表达式实现函数式编程，以一种更简洁和灵活的方式传递行为。</p><h2 id="sam-转换" tabindex="-1"><a class="header-anchor" href="#sam-转换" aria-hidden="true">#</a> SAM 转换</h2><p>对于函数式接口，可以通过 lambda 表达式实现 SAM 转换，从而使代码更简洁、更有可读性。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token keyword">interface</span> IntPredicate <span class="token punctuation">{</span>
   <span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span>i<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不使用SAM转换</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 创建一个类的实例</span>
<span class="token keyword">val</span> isEven <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> IntPredicate <span class="token punctuation">{</span>
   <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span>i<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
       <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用SAM转换</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 通过 lambda 表达式创建一个实例</span>
<span class="token keyword">val</span> isEven <span class="token operator">=</span> IntPredicate <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>run</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token keyword">interface</span> IntPredicate <span class="token punctuation">{</span>
   <span class="token keyword">fun</span> <span class="token function">accept</span><span class="token punctuation">(</span>i<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean
<span class="token punctuation">}</span>

<span class="token keyword">val</span> isEven <span class="token operator">=</span> IntPredicate <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Is 7 even? - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">isEven<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","fun-interface.html.vue"]]);export{d as default};
