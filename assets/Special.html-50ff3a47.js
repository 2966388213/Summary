import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-9ed46f86.js";const c={},t=e(`<h1 id="其他类" tabindex="-1"><a class="header-anchor" href="#其他类" aria-hidden="true">#</a> 其他类</h1><h2 id="cancellationtoken" tabindex="-1"><a class="header-anchor" href="#cancellationtoken" aria-hidden="true">#</a> CancellationToken</h2><p>C# 中的 CancellationToken 类是用于实现任务取消的机制。CancellationToken 可以使异步方法能够优雅地处理取消请求，避免不必要的计算开销或等待时间。</p><p>CancellationToken 包含一个 CancellationTokenSource 实例，后者是一个可用于发送取消请求的对象。当 CancellationTokenSource 调用 Cancel 方法时，CancellationToken 实例会发出一个取消请求信号，通知任务应该停止执行并且将自己标记为已取消状态。</p><p>使用 CancellationToken 的步骤如下：</p><ol><li>创建一个 CancellationTokenSource 实例：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">CancellationTokenSource</span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>通过 CancellationTokenSource.Token 属性获取一个 CancellationToken 实例：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">CancellationToken</span> token <span class="token operator">=</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在异步方法中使用 CancellationToken，如下所示：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> token<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 检查取消请求</span>
        token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行需要取消的代码</span>
        <span class="token keyword">await</span> <span class="token function">DoSomethingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 检查取消请求</span>
        token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>在需要取消异步方法的地方调用 CancellationTokenSource 的 Cancel 方法：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>CancellationToken 还提供了其他的一些方法和属性，比如：</p><ul><li><code>CanBeCanceled</code>：获取一个值，表示 CancellationToken 是否可以被取消。</li><li><code>IsCancellationRequested</code>：获取一个值，表示 CancellationToken 是否已经被请求取消。</li><li><code>Register</code>：向 CancellationToken 添加取消请求回调方法。</li><li><code>ThrowIfCancellationRequested</code>：检查 CancellationToken 是否已经被请求取消，如果是则抛出 OperationCanceledException 异常。</li></ul><p>总的来说，CancellationToken 类是一种非常方便的机制，可以帮助我们更好地管理异步任务，避免因为不必要的计算开销或等待时间导致应用程序响应变慢的问题。</p><h2 id="stopwatch-测试程序运行时间" tabindex="-1"><a class="header-anchor" href="#stopwatch-测试程序运行时间" aria-hidden="true">#</a> StopWatch 测试程序运行时间</h2><p>Stopwatch 是 C# 中一个用于测量时间的类，通常用于性能分析、算法优化、程序调试等场景。Stopwatch 类封装了高精度计时器，可以精确地测量代码的执行时间。</p><p>使用 Stopwatch 类需要先创建一个 Stopwatch 实例，然后通过调用 Start 方法开始计时，调用 Stop 方法停止计时，最后通过 Elapsed 属性获取计时结果。具体使用方法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stopwatch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行需要计时的代码</span>

stopwatch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TimeSpan</span> elapsed <span class="token operator">=</span> stopwatch<span class="token punctuation">.</span>Elapsed<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Execution time: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">elapsed<span class="token punctuation">.</span>TotalMilliseconds</span><span class="token punctuation">}</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stopwatch 类提供了以下属性和方法：</p><ul><li><code>IsRunning</code>：获取一个值，表示 Stopwatch 当前是否正在运行。</li><li><code>Elapsed</code>：获取一个 TimeSpan 结构体，表示 Stopwatch 自开始计时以来经过的时间。</li><li><code>ElapsedMilliseconds</code>：获取一个 long 值，表示 Stopwatch 自开始计时以来经过的毫秒数。</li><li><code>ElapsedTicks</code>：获取一个 long 值，表示 Stopwatch 自开始计时以来经过的计时周期数。</li><li><code>Reset</code>：重置 Stopwatch 的计时器，将 Elapsed 属性和其他计时数据设置为零。</li><li><code>Start</code>：开始或继续计时。</li><li><code>Stop</code>：停止计时。</li></ul><p>需要注意的是，Stopwatch 的精度取决于系统硬件和操作系统，一般情况下可以精确到毫秒或微秒级别，但并不保证绝对的准确性。同时，在多线程环境下使用 Stopwatch 时需要注意同步问题，避免并发访问导致的计时结果错误。</p><h2 id="interlocked" tabindex="-1"><a class="header-anchor" href="#interlocked" aria-hidden="true">#</a> InterLocked</h2><p>Interlocked 是一个线程安全的类，提供了原子性的操作，用于对某个变量进行自增、自减等操作，避免了多线程环境下因为竞争导致数据不一致的问题。</p><p>Interlocked 提供了以下方法：</p><ul><li><code>Increment</code>：对整数变量进行自增操作。</li><li><code>Decrement</code>：对整数变量进行自减操作。</li><li><code>Exchange</code>：交换两个变量的值。</li><li><code>CompareExchange</code>：比较两个变量的值，如果相等就用第三个参数替换第一个参数的值。</li></ul><p>使用 Interlocked 可以在多线程环境下对变量进行操作而不会出现数据不一致的情况。通常情况下，我们应该尽量避免使用 Interlocked，因为它的效率不如普通的变量操作。只有在确实需要在多线程环境下操作变量时，才应该使用 Interlocked。</p><h2 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel" aria-hidden="true">#</a> Parallel</h2><p><code>Parallel</code>是一个C#中的并行计算库，可以方便地实现多线程并行计算，提高程序的运行效率。下面是<code>Parallel</code>的详细使用方法：</p><ol><li><p>使用<code>Parallel.ForEach</code>方法实现并行循环：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> item <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这里是循环体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>source</code>是需要遍历的集合或数组，<code>item</code>是集合或数组中的每一个元素。</p></li><li><p>使用<code>Parallel.For</code>方法实现并行循环：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> i <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这里是循环体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>count</code>是循环次数，<code>i</code>是循环变量。</p></li><li><p>使用<code>Parallel.Invoke</code>方法执行多个任务：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 这里是第一个任务</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 这里是第二个任务</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法可以同时执行多个任务，当所有任务都执行完毕后，该方法才会返回。</p></li><li><p>设置并行度：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Parallel<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ParallelOptions</span> <span class="token punctuation">{</span> MaxDegreeOfParallelism <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这里是循环体</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过设置<code>ParallelOptions</code>的<code>MaxDegreeOfParallelism</code>属性，可以控制并行度，即同时执行的任务数。</p></li></ol><p>需要注意的是，在使用<code>Parallel</code>库时需要谨慎，避免出现线程安全问题。可以使用<code>Interlocked</code>类来进行原子操作，避免多线程竞争导致的数据不一致问题。</p>`,32),o=[t];function l(p,i){return a(),s("div",null,o)}const r=n(c,[["render",l],["__file","Special.html.vue"]]);export{r as default};
