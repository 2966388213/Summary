import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-fb5500ad.js";const t={},p=e(`<h1 id="常用" tabindex="-1"><a class="header-anchor" href="#常用" aria-hidden="true">#</a> 常用</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用C#可能会经常使用的技术</p></div><h2 id="deconstruct-将元组分解赋值" tabindex="-1"><a class="header-anchor" href="#deconstruct-将元组分解赋值" aria-hidden="true">#</a> Deconstruct 将元组分解赋值</h2><p>在 C# 中，Deconstructor（析构函数）是一种特殊的方法，它可以将一个对象分解为其组成部分，并将这些部分分配给单独的变量。Deconstructor 方法通常与构造函数一起使用，用于创建自定义类型的对象。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> country<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        Age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        Country <span class="token operator">=</span> country<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Deconstruct</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> country<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> Name<span class="token punctuation">;</span>
        age <span class="token operator">=</span> Age<span class="token punctuation">;</span>
        country <span class="token operator">=</span> Country<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们定义了一个名为 Person 的类，该类包含三个属性：Name、Age 和 Country。我们还定义了一个构造函数和一个 Deconstructor 方法，用于将 Person 对象分解为其组成部分。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>
<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;USA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> country<span class="token punctuation">)</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string">, Age: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">age</span><span class="token punctuation">}</span></span><span class="token string">, Country: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">country</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在上面的代码中，我们将 Person 对象的值分配给名为 name、age 和 country 的变量，然后将这些变量打印到控制台。</p></blockquote><h2 id="dynamic" tabindex="-1"><a class="header-anchor" href="#dynamic" aria-hidden="true">#</a> dynamic</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Foundation</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Value <span class="token operator">=</span> <span class="token string">&quot;hello world ~&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> Value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用properties</span>
<span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 dynamic</span>
<span class="token class-name"><span class="token keyword">dynamic</span></span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foundation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以直接使用</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dynamic-访问未知属性" tabindex="-1"><a class="header-anchor" href="#dynamic-访问未知属性" aria-hidden="true">#</a> dynamic 访问未知属性</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">dynamic</span></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ExpandoObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">string</span></span> propertyName <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">propertyName</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">person<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

propertyName <span class="token operator">=</span> <span class="token string">&quot;Age&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">propertyName</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">person<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

propertyName <span class="token operator">=</span> <span class="token string">&quot;Address&quot;</span><span class="token punctuation">;</span>
person<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">propertyName</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">person<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用 <code>dynamic</code> 对象 <code>person</code> 来访问和操作动态属性。首先，我们为 <code>person</code> 对象设置了 <code>Name</code> 和 <code>Age</code> 属性，然后我们使用字符串 <code>propertyName</code> 访问 <code>Name</code> 和 <code>Age</code> <code>属性的值。此时，propertyName</code> 变量的值是动态的，可以在运行时更改。</p><p>最后，我们通过设置 <code>person[propertyName]</code> 的值为字符串 123 Main St，动态地添加了一个名为 <code>Address</code> 的属性，并打印出该属性的值。</p><p>总之，<code>dynamic</code> 可以用于访问和操作动态属性，这使得我们可以轻松地处理动态添加的属性，而无需事先知道它们的名称或类型。</p><h2 id="时间戳" tabindex="-1"><a class="header-anchor" href="#时间戳" aria-hidden="true">#</a> 时间戳</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ticks<span class="token punctuation">;</span>
            
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>time <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 时间戳  秒</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ticks <span class="token operator">-</span> <span class="token number">621355968000000000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 时间戳 毫秒</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ticks <span class="token operator">-</span> <span class="token number">621355968000000000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>    Console.WriteLine($&quot;位与运算符 {(8 &amp; 12)} &quot;);    // = 8
        
    Console.WriteLine($&quot;位或运算符 {(8 || 12)}&quot;);    // = 12
    
    Console.WriteLine($&quot;位异或运算符 {(8 ^ 12)}&quot;);    // = 4
    
    Console.WriteLine($&quot;取反运算符 {(~123)}&quot;);       // = -124
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="移位运算符" tabindex="-1"><a class="header-anchor" href="#移位运算符" aria-hidden="true">#</a> 移位运算符</h2><div class="language-c# line-numbers-mode" data-ext="c#"><pre class="language-c#"><code>  Console.WriteLine($&quot;移位运算符 { 8 &gt;&gt; 2}&quot;);      // 8 * 2的2次幂(4) = 32
  
  Console.WriteLine($&quot;移位运算符 { 8 &lt;&lt; 2}&quot;);      // 8 / 2的2次幂(4) = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null-合并赋值" tabindex="-1"><a class="header-anchor" href="#null-合并赋值" aria-hidden="true">#</a> null 合并赋值</h2><div class="language-Csharp line-numbers-mode" data-ext="Csharp"><pre class="language-Csharp"><code>  // ??= 只有当左操作数=null的时候才会赋值

  int? a = null;

  a ??= &quot;123&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init-仅限初始化赋值-可以代替set属性" tabindex="-1"><a class="header-anchor" href="#init-仅限初始化赋值-可以代替set属性" aria-hidden="true">#</a> init 仅限初始化赋值，可以代替set属性</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">string</span></span> a<span class="token punctuation">{</span>
  <span class="token keyword">get</span><span class="token punctuation">;</span>
  <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token comment">// 只能初始化的时候赋值</span>
  <span class="token comment">// set;</span>
<span class="token punctuation">}</span>

<span class="token comment">// new () { a = &quot;&quot;};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="with-处理不可变的数据类型时可以创建新值" tabindex="-1"><a class="header-anchor" href="#with-处理不可变的数据类型时可以创建新值" aria-hidden="true">#</a> with 处理不可变的数据类型时可以创建新值</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span> <span class="token punctuation">{</span> FirstName <span class="token operator">=</span> <span class="token string">&quot;Mads&quot;</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Nielsen&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> otherPerson <span class="token operator">=</span> person <span class="token keyword">with</span> <span class="token punctuation">{</span> LastName <span class="token operator">=</span> <span class="token string">&quot;Torgersen&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="改进的匹配模式-when" tabindex="-1"><a class="header-anchor" href="#改进的匹配模式-when" aria-hidden="true">#</a> 改进的匹配模式 when</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">IsValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> val<span class="token punctuation">)</span><span class="token operator">=&gt;</span> val <span class="token keyword">switch</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;is int&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 如果只想检查表达式类型，可使用弃元 _ 代替变量名</span>
  <span class="token return-type class-name"><span class="token keyword">string</span></span> _ <span class="token operator">=&gt;</span> <span class="token string">&quot;is string&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// when表达式</span>
  <span class="token class-name">dataTime</span> time <span class="token keyword">when</span> time<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> dataTime<span class="token punctuation">.</span>Now <span class="token operator">=&gt;</span> <span class="token string">&quot;未过期&quot;</span><span class="token punctuation">,</span>
  _ <span class="token operator">=&gt;</span> <span class="token string">&quot;is null&quot;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yield-迭代器" tabindex="-1"><a class="header-anchor" href="#yield-迭代器" aria-hidden="true">#</a> yield 迭代器</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GalaxyClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ShowGalaxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> theGalaxies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Galaxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Galaxy</span> theGalaxy <span class="token keyword">in</span> theGalaxies<span class="token punctuation">.</span>NextGalaxy<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>theGalaxy<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> theGalaxy<span class="token punctuation">.</span>MegaLightYears<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Galaxies</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>IEnumerable<span class="token punctuation">&lt;</span>Galaxy<span class="token punctuation">&gt;</span></span> NextGalaxy
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Galaxy</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Tadpole&quot;</span><span class="token punctuation">,</span> MegaLightYears <span class="token operator">=</span> <span class="token number">400</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Galaxy</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Pinwheel&quot;</span><span class="token punctuation">,</span> MegaLightYears <span class="token operator">=</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Galaxy</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Milky Way&quot;</span><span class="token punctuation">,</span> MegaLightYears <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Galaxy</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Andromeda&quot;</span><span class="token punctuation">,</span> MegaLightYears <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Galaxy</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">String</span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> MegaLightYears <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="c-9-0" tabindex="-1"><a class="header-anchor" href="#c-9-0" aria-hidden="true">#</a> c# 9.0</h1><h2 id="记录类型-类型kotlin的数据类" tabindex="-1"><a class="header-anchor" href="#记录类型-类型kotlin的数据类" aria-hidden="true">#</a> 记录类型,类型kotlin的数据类</h2><h5 id="kotlin-data-class-shu-a-int" tabindex="-1"><a class="header-anchor" href="#kotlin-data-class-shu-a-int" aria-hidden="true">#</a> kotlin: data class shu(a:int)</h5><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> FirstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> LastName<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">&quot;Nancy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Davolio&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// output: Person { FirstName = Nancy, LastName = Davolio }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从c-9开始-只需要一句代码就能运行程序" tabindex="-1"><a class="header-anchor" href="#从c-9开始-只需要一句代码就能运行程序" aria-hidden="true">#</a> 从c#9开始 只需要一句代码就能运行程序</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="模式匹配" tabindex="-1"><a class="header-anchor" href="#模式匹配" aria-hidden="true">#</a> 模式匹配</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsLetter</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    c <span class="token keyword">is</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token keyword">and</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span> <span class="token keyword">or</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token keyword">and</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="partial-扩展类" tabindex="-1"><a class="header-anchor" href="#partial-扩展类" aria-hidden="true">#</a> partial 扩展类</h2><p>#####Partial关键词定义的类可以在多个地方被定义，最后编译的时候会被当作一个类来处理。</p><div class="language-Csharp line-numbers-mode" data-ext="Csharp"><pre class="language-Csharp"><code>class partial a{
  partial public a{get;set;}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="锁-look" tabindex="-1"><a class="header-anchor" href="#锁-look" aria-hidden="true">#</a> 锁 look</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token function">look</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 锁</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mutex-锁" tabindex="-1"><a class="header-anchor" href="#mutex-锁" aria-hidden="true">#</a> mutex 锁</h2><h2 id="regex" tabindex="-1"><a class="header-anchor" href="#regex" aria-hidden="true">#</a> regex</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token range operator">..</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>internal 内部类,只能在内部引用否则会报错</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Assembly2.cs  </span>
<span class="token comment">// Compile with: /target:library  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span>
<span class="token punctuation">{</span>  
   <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> intM <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
<span class="token comment">// Assembly2_a.cs  </span>
<span class="token comment">// Compile with: /reference:Assembly2.dll  </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAccess</span>
<span class="token punctuation">{</span>  
   <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>  
      <span class="token class-name"><span class="token keyword">var</span></span> myBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Ok.  </span>
      BaseClass<span class="token punctuation">.</span>intM <span class="token operator">=</span> <span class="token number">444</span><span class="token punctuation">;</span>    <span class="token comment">// CS0117  </span>
   <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数关键词in-and-out" tabindex="-1"><a class="header-anchor" href="#参数关键词in-and-out" aria-hidden="true">#</a> 参数关键词<code>in</code> and <code>out</code></h2><ul><li>in <ul><li>in 关键字用于声明一个输入参数。使用 in 关键字修饰的参数只能在方法中读取，不能被修改。这意味着，使用 in 关键字修饰的参数是只读的，可以保护方法中的数据不被意外修改。使用 in 关键字可以提高代码的安全性和可维护性。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">in</span> <span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The value is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">value</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>out <ul><li>使用 out 关键字修饰的参数必须在方法中被初始化，并且必须被方法修改。这意味着，使用 out 关键字修饰的参数是只写的，用于将方法的结果返回给调用方。<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> quotient<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> remainder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    quotient <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    remainder <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="timer-定时执行任务" tabindex="-1"><a class="header-anchor" href="#timer-定时执行任务" aria-hidden="true">#</a> timer 定时执行任务</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Timers</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Timer</span> timer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个 Timer 实例，并设置其周期为 1 秒</span>
        timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义一个 Elapsed 事件的处理方法</span>
        timer<span class="token punctuation">.</span>Elapsed <span class="token operator">+=</span> OnTimerElapsed<span class="token punctuation">;</span>

        <span class="token comment">// 启动计时器</span>
        timer<span class="token punctuation">.</span>Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// 防止控制台应用程序在计时器退出时立即关闭</span>
        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTimerElapsed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ElapsedEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 执行需要周期性执行的操作</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;The time is now </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","other.html.vue"]]);export{d as default};
