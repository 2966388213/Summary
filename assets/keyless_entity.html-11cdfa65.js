import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-8c4720e2.js";const t={},p=e(`<h1 id="无键实体类型" tabindex="-1"><a class="header-anchor" href="#无键实体类型" aria-hidden="true">#</a> 无键实体类型</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于无键实体类型，由于它们通常映射到数据库视图或者存储过程，所以EF Core默认将它们视为只读的。这意味着我们不能直接使用EF Core的增删改查操作来修改无键实体类型的数据。</p><p>然而，这并不意味着我们不能修改这些数据。实际上，我们可以通过以下方式来修改这些数据：</p><ol><li><p><strong>使用存储过程</strong>：如果数据库视图或者存储过程支持修改数据，我们可以在DbContext中定义一个方法，使用<code>FromSqlRaw</code>或者<code>ExecuteSqlRaw</code>来调用存储过程。</p></li><li><p><strong>使用原始SQL命令</strong>：我们也可以直接使用SQL命令来修改数据。我们可以使用DbContext的<code>Database.ExecuteSqlRaw</code>方法来执行SQL命令。</p></li><li><p><strong>使用其他实体类型</strong>：如果无键实体类型的数据来自于其他的实体类型，我们可以通过修改这些实体类型的数据来间接修改无键实体类型的数据。</p></li></ol><p>请注意，直接使用SQL命令或者存储过程来修改数据可能会绕过EF Core的一些功能，如跟踪更改、处理并发冲突等。</p></div><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ul><li>充当SQL查询返回的类型</li><li>映射到不包含主键的数据库视图</li><li>映射到未定义主键的表</li><li>映射到模型中定义的查询</li></ul><h2 id="定义无键实体类型" tabindex="-1"><a class="header-anchor" href="#定义无键实体类型" aria-hidden="true">#</a> 定义无键实体类型</h2><p>假设我们有一个数据库视图，它包含了一些用户的信息，我们可以创建一个无键实体类型来查询这个视图。</p><p>首先，我们需要定义一个无键实体类型的类。这个类的属性应该与数据库视图的列相对应。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserView</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// 其他属性...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要在 DbContext 中配置这个无键实体类型的映射。我们可以使用 Fluent API 的 <code>HasNoKey</code> 方法来指定这个实体类型没有键，并使用 <code>ToView</code> 方法来指定对应的数据库视图：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>UserView<span class="token punctuation">&gt;</span></span> UserView <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        modelBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Entity</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserView<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasNoKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToView</span><span class="token punctuation">(</span><span class="token string">&quot;UserView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们就可以像查询其他的 DbSet 一样来查询这个无键实体类型了：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> context<span class="token punctuation">.</span>UserView<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理查询结果...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","keyless_entity.html.vue"]]);export{d as default};
