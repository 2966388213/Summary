import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as i,a}from"./app-7944a742.js";const s={},c=a(`<h1 id="docker-起步" tabindex="-1"><a class="header-anchor" href="#docker-起步" aria-hidden="true">#</a> docker 起步</h1><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>将docker应用到现有的<code>.net core</code>项目中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行docker命令, 初始化项目</span>
<span class="token function">docker</span> init

<span class="token comment"># 启动docker项目</span>
<span class="token function">docker</span> compose up <span class="token parameter variable">--build</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dockerfile-compose的区别" tabindex="-1"><a class="header-anchor" href="#dockerfile-compose的区别" aria-hidden="true">#</a> dockerfile &amp; compose的区别</h2><p>Dockerfile和Docker Compose都是用于容器化应用程序的工具，但它们的作用有所不同：</p><ol><li><p><strong>Dockerfile：</strong></p><ul><li>Dockerfile用于定义单个Docker镜像的构建过程。</li><li>通过Dockerfile，可以指定容器的基础镜像、依赖安装、文件复制、环境变量设置等操作，以及容器启动时执行的命令。</li><li>Dockerfile使得开发者可以自动化地构建可重复部署的容器镜像，并将应用程序与其依赖项打包在一起。</li></ul></li><li><p><strong>Docker Compose：</strong></p><ul><li>Docker Compose用于定义和管理多个容器化的服务。</li><li>通过docker-compose.yaml文件，可以定义多个容器及其之间的关系、网络配置、数据卷挂载等。</li><li>Docker Compose简化了多个容器之间的协作和部署过程，使得开发者可以轻松地在本地开发和测试复杂的多容器应用程序。</li></ul></li></ol><p>总的来说，Dockerfile用于构建单个容器镜像，而Docker Compose用于定义和管理多个容器化的服务，两者结合使用可以实现容器化应用程序的开发、测试和部署。</p>`,8),n=[c];function r(l,d){return o(),i("div",null,n)}const m=e(s,[["render",r],["__file","index.html.vue"]]);export{m as default};
