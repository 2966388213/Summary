import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-d39e34ec.js";const t={},p=e(`<h1 id="orm框架dapper" tabindex="-1"><a class="header-anchor" href="#orm框架dapper" aria-hidden="true">#</a> ORM框架Dapper</h1><p>Dapper是一个轻量级的对象关系映射（ORM）库，用于在C#和数据库之间进行数据映射。Dapper旨在提供高性能和简洁性，同时允许开发人员编写原生SQL查询，并将结果映射到.NET对象。</p><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用api</h2><p>Dapper提供了一系列常用的API，用于执行SQL查询和映射结果。以下是一些常见的Dapper API：</p><ol><li><code>Query&lt;T&gt;</code>：执行SQL查询，并将结果映射为<code>IEnumerable&lt;T&gt;</code>。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> results <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyClass<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM MyTable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>QueryFirstOrDefault&lt;T&gt;</code>：执行SQL查询并返回结果集的第一行，如果没有结果则返回默认值。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryFirstOrDefault</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyClass<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM MyTable WHERE Id = @Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><code>QueryMultiple</code>：执行包含多个结果集的SQL查询。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> multiResult <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">QueryMultiple</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Table1; SELECT * FROM Table2;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result1 <span class="token operator">=</span> multiResult<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyClass1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result2 <span class="token operator">=</span> multiResult<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyClass2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>Execute</code>：执行不返回结果集的SQL语句，通常用于更新或插入操作。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> affectedRows <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token string">&quot;UPDATE MyTable SET Column1 = @Value WHERE Id = @Id&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Value <span class="token operator">=</span> <span class="token string">&quot;NewValue&quot;</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><code>Insert</code>：执行插入操作并返回自增列的值。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> newId <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QuerySingle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO MyTable (Column1, Column2) VALUES (@Value1, @Value2); SELECT CAST(SCOPE_IDENTITY() as int)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Value1 <span class="token operator">=</span> <span class="token string">&quot;Value1&quot;</span><span class="token punctuation">,</span> Value2 <span class="token operator">=</span> <span class="token string">&quot;Value2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些是Dapper的一些基本API，但还有其他更高级的功能和选项可供使用，具体取决于您的需求。</p><h2 id="参数化查询" tabindex="-1"><a class="header-anchor" href="#参数化查询" aria-hidden="true">#</a> 参数化查询</h2><p>Dapper中的参数化查询是一种安全和有效的执行SQL查询的方式。参数化查询通过将参数与SQL语句分离，确保了用户输入不会被直接嵌入到SQL中，从而防止SQL注入攻击。以下是一个简单的例子，说明Dapper中的参数化查询：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM People WHERE Name = @Name AND Age = @Age&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> name<span class="token punctuation">,</span> Age <span class="token operator">=</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>@Name</code>和<code>@Age</code>是参数占位符，它们与实际的参数值通过匿名类型进行关联。Dapper会将这些参数值安全地插入SQL查询，避免潜在的安全风险。</p><p>通过参数化查询，您可以：</p><ul><li>避免手动构建SQL字符串，减少了错误的可能性。</li><li>增强了代码的可读性，参数值清晰可见。</li><li>防止SQL注入攻击，因为用户输入不会直接嵌入到SQL语句中。</li></ul><p>总体而言，使用Dapper的参数化查询是一种良好的实践，能够提高应用程序的安全性和可维护性。</p><h2 id="dynamicparameter" tabindex="-1"><a class="header-anchor" href="#dynamicparameter" aria-hidden="true">#</a> DynamicParameter</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>  <span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>String<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>
  parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@Age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  con<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>&#39;<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx <span class="token keyword">where</span> <span class="token class-name">Name</span><span class="token operator">=</span>@Name <span class="token keyword">and</span> Age<span class="token operator">=</span>@Age&#39;<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add和adddynamicparams的区别" tabindex="-1"><a class="header-anchor" href="#add和adddynamicparams的区别" aria-hidden="true">#</a> Add和AddDynamicParams的区别</h3><p><code>DynamicParameters</code>类中有两个用于添加参数的方法，分别是<code>Add</code>和<code>AddDynamicParams</code>。这两者的使用场景略有不同：</p><ol><li><p><strong>Add方法：</strong></p><ul><li><code>Add</code>方法用于显式地为<code>DynamicParameters</code>添加一个具体的参数。</li><li>您需要指定参数的名称、值、数据类型和参数方向等信息。</li><li>这是一个示例：<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>String<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>
 parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;@Age&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>AddDynamicParams方法：</strong></p><ul><li><code>AddDynamicParams</code>方法用于从一个匿名类型或<code>DynamicParameters</code>实例中动态添加一组参数。</li><li>这在需要动态生成参数集合的情况下很有用。</li><li>这是一个示例：<div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> additionalParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> City <span class="token operator">=</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> Country <span class="token operator">=</span> <span class="token string">&quot;USA&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">var</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 parameters<span class="token punctuation">.</span><span class="token function">AddDynamicParams</span><span class="token punctuation">(</span>additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>两者的选择取决于您的需求。如果您已经知道参数的具体信息，使用<code>Add</code>方法是直观和明确的。而如果您有一个动态的参数集合，例如从匿名类型中动态获取参数，那么使用<code>AddDynamicParams</code>方法更为方便。</p>`,28),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","Dapper.html.vue"]]);export{d as default};
