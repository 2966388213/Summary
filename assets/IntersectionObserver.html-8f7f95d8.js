import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,a as d}from"./app-315d5998.js";const o={},a=d('<h1 id="intersectionobserver" tabindex="-1"><a class="header-anchor" href="#intersectionobserver" aria-hidden="true">#</a> IntersectionObserver</h1><blockquote><p>被配置为监听一段给定比例的可见区域。一旦IntersectionObserver被创建，则无法更改其配置，所以一个给定的观察对象只能用来监听可见区域的特定变化值；然而，你可以在同一个观察者对象中配置监听多个目标元素。</p></blockquote><h2 id="callback" tabindex="-1"><a class="header-anchor" href="#callback" aria-hidden="true">#</a> callback</h2><blockquote><p>callback是添加监听后，当监听目标发生滚动变化时触发的回调函数。接收一个entries，即intersectionObserverEntry的实例。描述了目标元素与root的交叉状态</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>boundingClientRect</td><td>返回包含目标元素的边界信息</td></tr><tr><td>intersectionRatio</td><td>返回目标元素出现在可视区的比例</td></tr><tr><td>isIntersecting</td><td>返回一个布尔值，下列两种操作均会触发callback：1.如果目标元素出现在root可视区，返回true。2.如果从root可视区消失，返回false</td></tr><tr><td>rootBounds</td><td>用来描述交叉区域观察者（intersection observer）中的根</td></tr><tr><td>target</td><td>目标元素：与根出现相交区域改变的元素</td></tr><tr><td>time</td><td>返回一个记录从IntersectionObserver的时间原点到交叉被触发的时间的时间戳</td></tr></tbody></table><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h2><blockquote><p>options 是一个对象，用来配置参数，也可以不填</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>root</td><td>如果未传入值或值为null，则默认使用顶级文档的视窗</td></tr><tr><td>rootMargin</td><td></td></tr><tr><td>threshold</td><td>一个包含阈值的列表，按升序排序，列表中的每个阈值都是监听对象的交叉区域的比率。当监听对象的任何阈值被超过时，都会触发callback。默认为0</td></tr></tbody></table><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>observe（）</td><td>开始监听一个目标元素</td></tr><tr><td>unobserve()</td><td>停止监听特定目标元素</td></tr><tr><td>takeRecords()</td><td>返回所有观察目标的IntersectionObserverEntry对象数组</td></tr><tr><td>disconnect()</td><td>使IntersectionObserver对象停止全部监听工作</td></tr></tbody></table>',10),n=[a];function c(s,i){return e(),r("div",null,n)}const l=t(o,[["render",c],["__file","IntersectionObserver.html.vue"]]);export{l as default};
