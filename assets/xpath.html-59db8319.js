import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as r,a as e}from"./app-716fac87.js";const a={},i=e(`<h1 id="xpath-xml-find" tabindex="-1"><a class="header-anchor" href="#xpath-xml-find" aria-hidden="true">#</a> xpath (xml find)</h1><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>node_name</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>绝对路径，从根节点选取</td></tr><tr><td>//</td><td>相对路径，从所有节点中查找符合条件的节点，包括子节点和后代节点</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性值</td></tr></tbody></table><h2 id="节点类型" tabindex="-1"><a class="header-anchor" href="#节点类型" aria-hidden="true">#</a> 节点类型</h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Root</td><td>根元素节点</td></tr><tr><td>Element</td><td>元素节点</td></tr><tr><td>Text</td><td>文本节点</td></tr><tr><td>Attribute</td><td>节点的属性</td></tr><tr><td>Comment</td><td>注释</td></tr></tbody></table><h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任意元素节点</td></tr><tr><td>@*</td><td>匹配任意属性节点</td></tr><tr><td>node()</td><td>匹配任何类型的节点</td></tr></tbody></table><h2 id="函数或属性" tabindex="-1"><a class="header-anchor" href="#函数或属性" aria-hidden="true">#</a> 函数或属性</h2><table><thead><tr><th>property</th><th>描述</th></tr></thead><tbody><tr><td>text()</td><td><code>/div/text()</code> = 获取文本，<code>/div/[text()=&#39;xxx&#39;]</code> = 文本为xxx的元素</td></tr><tr><td>starts-with(@attribute, &#39;xxx&#39;)</td><td>属性名以xxx开头的元素</td></tr><tr><td>contains(@attribute, &#39;&#39;)</td><td>属性名包含xxx的元素</td></tr><tr><td>[@attribute=xxx and @attribute=xxx2]</td><td>同时有两个属性值的元素</td></tr><tr><td>text()</td><td>子文本节点</td></tr><tr><td>concat(string1,string2,...)</td><td>连接所有字符串</td></tr><tr><td>ceiling()</td><td>向上取整</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>sum()</td><td>返回两个数的整合</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="谓词" tabindex="-1"><a class="header-anchor" href="#谓词" aria-hidden="true">#</a> 谓词</h2><table><thead><tr><th>谓词</th><th>描述</th></tr></thead><tbody><tr><td>[position()]</td><td><code>/div/[position() = 0]</code>序号等于0的元素</td></tr><tr><td>[last()]</td><td>最后一个元素</td></tr><tr><td>[@属性名 = &#39;内容&#39;]</td><td>属性的内容=xxx的元素</td></tr><tr><td>[元素 = xxx]</td><td><code>/div/[div = content]</code> 元素的值等于xxx的</td></tr></tbody></table><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>|</td><td>计算两个节点集</td></tr><tr><td>+</td><td></td></tr><tr><td>-</td><td></td></tr><tr><td>*</td><td></td></tr><tr><td>div</td><td>除法</td></tr><tr><td>mod</td><td>取余</td></tr><tr><td>=</td><td></td></tr><tr><td>!=</td><td></td></tr><tr><td>&lt;</td><td></td></tr><tr><td>&gt;</td><td></td></tr><tr><td>&lt;=</td><td></td></tr><tr><td>&gt;=</td><td></td></tr><tr><td>or</td><td></td></tr><tr><td>and</td><td></td></tr><tr><td>not()</td><td>不等于xxx的xxx</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- 选择根节点div元素 --&gt;
//div
&lt;!-- 选择元素为div并且属性id=‘my_id’的元素 --&gt;
//div[@id=&#39;my_id&#39;]
选择包含id属性的元素
//div/@id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),h=[i];function n(o,l){return d(),r("div",null,h)}const c=t(a,[["render",n],["__file","xpath.html.vue"]]);export{c as default};
