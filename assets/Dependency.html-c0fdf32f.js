import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-6a431e2a.js";const t={},c=e(`<h1 id="依赖关系注入" tabindex="-1"><a class="header-anchor" href="#依赖关系注入" aria-hidden="true">#</a> 依赖关系注入</h1><h2 id="服务生命周期" tabindex="-1"><a class="header-anchor" href="#服务生命周期" aria-hidden="true">#</a> 服务生命周期</h2><p>可以使用以下任一生存周期注册服务：</p><ul><li>暂时（AddTransient） <ul><li>暂时生存期服务是每次从服务容器进行请求时创建的。 这种生存期适合轻量级、 无状态的服务。 向 AddTransient 注册暂时性服务。</li><li>在处理请求的应用中，在请求结束时会释放暂时服务</li></ul></li><li>作用域(AddScoped) <ul><li>对于 Web 应用，指定了作用域的生存期指明了每个客户端请求（连接）创建一次服务。 向 AddScoped 注册范围内服务。</li><li>在处理请求的应用中，在请求结束时会释放暂时服务</li></ul></li><li>单例(AddSingleton) <ul><li>在首次请求它们时进行创建；</li><li>在向容器直接提供实现实例时由开发人员进行创建。 很少用到此方法。</li><li>来自依赖关系注入容器的服务实现的每一个后续请求都使用同一个实例。 如果应用需要单一实例行为，则允许服务容器管理服务的生存期。 不要实现单一实例设计模式，或提供代码来释放单一实例。 服务永远不应由解析容器服务的代码释放。 如果类型或工厂注册为单一实例，则容器自动释放单一实例。</li></ul></li></ul><h2 id="注入到操作方法-fromservices" tabindex="-1"><a class="header-anchor" href="#注入到操作方法-fromservices" aria-hidden="true">#</a> 注入到操作方法 <code>FromServices</code></h2><blockquote><p>使用特性<code>[FromServices]</code>将依赖属性注入到方法</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromServices</span></span><span class="token punctuation">]</span> <span class="token class-name">IDateTime</span> dateTime<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Content</span><span class="token punctuation">(</span> <span class="token interpolation-string"><span class="token string">$&quot;Current server time: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dateTime<span class="token punctuation">.</span>Now</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="winui3使用依赖注入" tabindex="-1"><a class="header-anchor" href="#winui3使用依赖注入" aria-hidden="true">#</a> WinUI3使用依赖注入</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>
<span class="token comment">// 注册依赖</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceProvider</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFilesService<span class="token punctuation">,</span> FilesService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConsoleService<span class="token punctuation">,</span> ConsoleService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFileLogger<span class="token punctuation">,</span> FileLogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取依赖</span>
<span class="token comment">// Retrieve a logger service with constructor injection</span>
<span class="token class-name">IFileLogger</span> fileLogger <span class="token operator">=</span> App<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFileLogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// other</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> ActivatorUtilities<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetServiceOrCreateInstance</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>serviceProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="要使用communitytoolkit实现依赖注入-你需要以下几个步骤" tabindex="-1"><a class="header-anchor" href="#要使用communitytoolkit实现依赖注入-你需要以下几个步骤" aria-hidden="true">#</a> 要使用CommunityToolkit实现依赖注入，你需要以下几个步骤：</h2><ul><li>安装<code>CommunityToolkit.Mvvm</code>和<code>Microsoft.Extensions.DependencyInjection</code>两个NuGet包。</li><li>在你的应用程序启动时，创建一个<code>IServiceCollection</code>对象，并使用<code>AddSingleton</code>、<code>AddScoped</code>或<code>AddTransient</code>方法注册你需要的服务。</li><li>使用<code>BuildServiceProvider</code>方法创建一个<code>IServiceProvider</code>对象，并将其保存为全局变量或属性。</li><li>在你的ViewModel类中，添加一个带有所需服务参数的构造函数，并使用<code>Ioc.Default.GetService&lt;T&gt;</code>方法获取服务实例。</li><li>在你的View类中，使用<code>Ioc.Default.GetRequiredService&lt;T&gt;</code>方法获取ViewModel实例，并将其设置为DataContext属性。</li></ul><p>下面是一个简单的示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// App.xaml.cs</span>
<span class="token keyword">using</span> <span class="token namespace">CommunityToolkit<span class="token punctuation">.</span>Mvvm<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Application</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Create a new service collection</span>
        <span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Register your services here</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMessageService<span class="token punctuation">,</span> MessageService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Build the service provider</span>
        <span class="token class-name">IServiceProvider</span> provider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Set it as the default service provider for the MVVM Toolkit Ioc module</span>
        Ioc<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// MainViewModel.cs</span>
<span class="token keyword">using</span> <span class="token namespace">CommunityToolkit<span class="token punctuation">.</span>Mvvm<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">CommunityToolkit<span class="token punctuation">.</span>Mvvm<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainViewModel</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ObservableObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMessageService</span> _messageService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MainViewModel</span><span class="token punctuation">(</span><span class="token class-name">IMessageService</span> messageService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Get the message service instance from the constructor parameter</span>
        _messageService <span class="token operator">=</span> messageService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Use the message service to send a message</span>
        _messageService<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// MainWindow.xaml.cs</span>
<span class="token keyword">using</span> <span class="token namespace">CommunityToolkit<span class="token punctuation">.</span>Mvvm<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Window</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the MainViewModel instance from the Ioc module and set it as DataContext</span>
        DataContext <span class="token operator">=</span> Ioc<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MainViewModel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[c];function i(o,l){return s(),a("div",null,p)}const r=n(t,[["render",i],["__file","Dependency.html.vue"]]);export{r as default};
