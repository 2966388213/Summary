import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as a,c as i,d as e,e as t,b as r,a as s}from"./app-2bf5d4a1.js";const h={},d=e("h1",{id:"c-中好用的开源库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#c-中好用的开源库","aria-hidden":"true"},"#"),t(" C#中好用的开源库")],-1),c=e("h2",{id:"mediatr",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mediatr","aria-hidden":"true"},"#"),t(" MediatR")],-1),_=e("p",null,"MediatR是一个无依赖的进程内消息传递库，支持请求/响应、命令、查询、通知和事件，同步和异步，以及通过C#泛型变化实现的智能分发。下面是一些使用案例：",-1),p=e("strong",null,"请求/响应模式",-1),u={href:"http://xn--ASP-lp6e.NET",target:"_blank",rel:"noopener noreferrer"},f=e("strong",null,"命令模式",-1),b={href:"http://xn--ASP-lp6e.NET",target:"_blank",rel:"noopener noreferrer"},m=e("strong",null,"查询模式",-1),g={href:"http://xn--ASP-lp6e.NET",target:"_blank",rel:"noopener noreferrer"},P=e("strong",null,"通知模式",-1),N={href:"http://xn--ASP-lp6e.NET",target:"_blank",rel:"noopener noreferrer"},E=e("strong",null,"事件模式",-1),T={href:"http://xn--ASP-lp6e.NET",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"你可以参考这些案例来了解如何使用MediatR。",-1),A=e("p",null,"如果你想查看更多关于MediatR的示例代码，请参考以下链接：",-1),x={href:"https://www.cnblogs.com/yaopengfei/p/16672851.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://cloud.tencent.com/developer/article/1362488",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.cnblogs.com/yilezhu/p/9866068.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.cnblogs.com/danvic712/p/get-started-with-mediatr-in-asp-net-core.html",target:"_blank",rel:"noopener noreferrer"},y=s('<h2 id="fluentvalidation" tabindex="-1"><a class="header-anchor" href="#fluentvalidation" aria-hidden="true">#</a> FluentValidation</h2><p>这是一个流行的.NET验证库，用于构建强类型的验证规则。它使用流畅的接口和lambda表达式来定义验证逻辑。</p><h2 id="polly" tabindex="-1"><a class="header-anchor" href="#polly" aria-hidden="true">#</a> polly</h2><ul><li><strong>Polly是什么</strong>：Polly是一个.NET的弹性和瞬态故障处理库，它允许开发者以流畅和线程安全的方式表达诸如重试、断路器、超时、隔离和回退等策略。</li><li><strong>Polly的特点</strong>：Polly提供了多种弹性策略，包括反应式策略和主动策略。反应式策略处理执行回调时抛出或返回的特定异常或结果。主动策略可以主动决定取消或拒绝执行回调。</li><li><strong>Polly的使用</strong>：要使用Polly，你必须提供一个回调并使用弹性管道执行它。弹性管道是一个或多个弹性策略的组合，如重试、超时和限流。Polly使用构建器来将这些策略集成到管道中。</li></ul>',4),C={id:"benchmark-net",tabindex:"-1"},w=e("a",{class:"header-anchor",href:"#benchmark-net","aria-hidden":"true"},"#",-1),B={href:"http://Benchmark.net",target:"_blank",rel:"noopener noreferrer"},I=e("li",null,[e("strong",null,"BenchmarkDotNet"),t("：一个强大的.NET库，用于进行性能基准测试。它可以帮助你将方法转换为基准，跟踪它们的性能，并分享可复现的测量实验。它的使用方式和编写单元测试一样简单！")],-1),v=e("li",null,[e("strong",null,"BenchmarkDotNet的特点"),t("：它具有以下四个方面的特点：简单性，自动化，可靠性和友好性。它提供了简洁的API，让你可以用声明式的风格设计复杂的性能实验。它还能保证测量结果的准确性和稳定性，避免常见的基准测试错误，并在发现问题时给出警告。它还能以用户友好的形式呈现结果，包括表格，统计数据，直方图和图表等。")],-1),V=e("strong",null,"BenchmarkDotNet的应用",-1),W={href:"http://xn--uiry38a.NET",target:"_blank",rel:"noopener noreferrer"};function L(D,G){const n=l("ExternalLinkIcon");return a(),i("div",null,[d,c,_,e("ol",null,[e("li",null,[p,t("："),e("a",u,[t("在ASP.NET"),r(n)]),t(" Core Web API中使用MediatR来处理HTTP请求，将请求转换为命令或查询，并将响应返回给客户端。")]),e("li",null,[f,t("："),e("a",b,[t("在ASP.NET"),r(n)]),t(" Core Web API中使用MediatR来处理命令，例如创建、更新或删除资源。")]),e("li",null,[m,t("："),e("a",g,[t("在ASP.NET"),r(n)]),t(" Core Web API中使用MediatR来处理查询，例如获取资源列表或单个资源。")]),e("li",null,[P,t("："),e("a",N,[t("在ASP.NET"),r(n)]),t(" Core Web API中使用MediatR来发布通知，例如在资源创建、更新或删除时发布通知。")]),e("li",null,[E,t("："),e("a",T,[t("在ASP.NET"),r(n)]),t(" Core Web API中使用MediatR来发布事件，例如在资源创建、更新或删除时发布事件。")])]),k,A,e("ul",null,[e("li",null,[e("a",x,[t("第一节：MediatR简介、快速上手、基于MediatR实现领域事件"),r(n)])]),e("li",null,[e("a",R,[t("ASP.NET Core中使用MediatR实现命令和中介者模式"),r(n)])]),e("li",null,[e("a",M,[t("ASP.NET Core中使用MediatR实现命令和中介者模式"),r(n)])]),e("li",null,[e("a",S,[t("在 ASP.NET Core 项目中使用 MediatR 实现中介者模式"),r(n)])])]),y,e("h2",C,[w,t(),e("a",B,[t("Benchmark.net"),r(n)])]),e("ul",null,[I,v,e("li",null,[V,t("：它已经被17700多个GitHub项目采用，"),e("a",W,[t("包括.NET"),r(n)]),t(" Runtime, .NET Compiler, .NET Performance等。它支持多种运行时，语言，操作系统和处理器架构。它还能帮助你进行一些高级的性能分析任务，如测量内存开销和反汇编代码。")])])])}const F=o(h,[["render",L],["__file","GoodLibraries.html.vue"]]);export{F as default};
