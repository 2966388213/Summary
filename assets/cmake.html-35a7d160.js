import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as t,f as d,d as a,e as n,b as r,a as e}from"./app-c5491669.js";const o={},p=e(`<h1 id="cmake-包管理工具" tabindex="-1"><a class="header-anchor" href="#cmake-包管理工具" aria-hidden="true">#</a> cmake 包管理工具</h1><h2 id="cmakelists-txt配置" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt配置" aria-hidden="true">#</a> CMakeLists.txt配置</h2><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求, 此行必须在顶层</span>
<span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span><span class="token punctuation">(</span><span class="token string">&quot;项目信息&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 指定生成目标</span>
<span class="token comment"># 第一个参数是程序名，第二个参数是源文件</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>name source.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目" aria-hidden="true">#</a> 构建项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个build目录</span>
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build

<span class="token comment"># 构建项目，由于当前目录是build，所以使用..指向上一级目录</span>
cmake <span class="token punctuation">..</span>

<span class="token comment"># 2</span>
cmake -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="假设现在的目录是这样的" tabindex="-1"><a class="header-anchor" href="#假设现在的目录是这样的" aria-hidden="true">#</a> 假设现在的目录是这样的</h3><ul><li>根目录 <ul><li>src <ul><li>CMakeLists.txt</li><li>main.cpp</li></ul></li><li>build</li></ul></li></ul><blockquote><p>当前的目录是根目录</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 使用cmake 3.*的功能构建</span>
cmake <span class="token parameter variable">-S</span> src <span class="token parameter variable">-B</span> build

<span class="token comment"># 项目会在build目录成功构建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成项目" tabindex="-1"><a class="header-anchor" href="#生成项目" aria-hidden="true">#</a> 生成项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#其中src是构建的项目目录</span>
cmake <span class="token parameter variable">--build</span> src
<span class="token comment"># --config 可以指定生成的类型</span>
cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--config</span> Release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打开项目" tabindex="-1"><a class="header-anchor" href="#打开项目" aria-hidden="true">#</a> 打开项目</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">--open</span> src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="配置或者生成预设" tabindex="-1"><a class="header-anchor" href="#配置或者生成预设" aria-hidden="true">#</a> 配置或者生成预设</h2><blockquote><p>如果不生成预设，vs编辑器无法打开源文件</p></blockquote><p>vs code编辑器可以按<code>ctrl+shift+p</code>输入<code>Cmake: Select Configure Preset</code> 然后选择已有的预设</p><h2 id="add-subdirectory-添加子文件" tabindex="-1"><a class="header-anchor" href="#add-subdirectory-添加子文件" aria-hidden="true">#</a> add_subdirectory 添加子文件</h2><blockquote><p>该语句会在执行完当前文件夹CMakeLists.txt之后执行src子目录下的CMakeLists.txt</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="link-directories" tabindex="-1"><a class="header-anchor" href="#link-directories" aria-hidden="true">#</a> link_directories()</h2><blockquote><p>设置库目录</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># PROJECT_SOURCE_DIR 是 cmake的环境变量</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/lib/linux<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="link-libraries" tabindex="-1"><a class="header-anchor" href="#link-libraries" aria-hidden="true">#</a> link_libraries</h2><blockquote><p>链接静态库</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment">#设置链接目录</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span> <span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/lib/linux<span class="token punctuation">)</span>
<span class="token keyword">link_libraries</span><span class="token punctuation">(</span>
        lib1.a
        lib2.a
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="include-directories" tabindex="-1"><a class="header-anchor" href="#include-directories" aria-hidden="true">#</a> include_directories()</h2><blockquote><p>设置项目的包含目录 include_directories 是用来指定头文件的搜索路径，让编译器能够找到需要的头文件。</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 假设当前源码路径为 /home/user/project</span>
<span class="token comment"># 假设有一个头文件 hello.h 在 /home/user/project/include 目录下</span>
<span class="token comment"># 假设有一个源文件 main.cpp 在 /home/user/project/src 目录下</span>

<span class="token comment"># 添加 include 目录到头文件搜索路径</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span> <span class="token comment"># include是文件目录</span>

<span class="token comment"># 添加 src 目录到源文件搜索路径</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello src/main.cpp<span class="token punctuation">)</span>

<span class="token comment"># 这样编译器就能找到 hello.h 文件了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="递归搜索该文件夹-将文件夹下-包含子目录-符合类型的文件添加到文件列表" tabindex="-1"><a class="header-anchor" href="#递归搜索该文件夹-将文件夹下-包含子目录-符合类型的文件添加到文件列表" aria-hidden="true">#</a> 递归搜索该文件夹，将文件夹下（包含子目录）符合类型的文件添加到文件列表</h2><blockquote><p>例如将当前文件夹下（包括子目录下）所有.cpp文件的文件名加入到MAIN_SRC中，所有.h加入到MAIN_HDR中</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE MAIN_SRC <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/*.cpp<span class="token punctuation">)</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE MAIN_HDR <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/*.h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aux-source-directory" tabindex="-1"><a class="header-anchor" href="#aux-source-directory" aria-hidden="true">#</a> aux_source_directory();</h2><blockquote><p>aux_source_directory 把指定目录的源文件加载到变量里面</p></blockquote><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 第一个参数为源文件的目录</span>
<span class="token comment"># 第二个参数为自定义变量（无需声明）</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. <span class="token property">SOURCES</span><span class="token punctuation">)</span>;
<span class="token comment"># model目录</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token string">&quot;./Model/.&quot;</span> Model<span class="token punctuation">)</span>;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add-executable-生成应用程序" tabindex="-1"><a class="header-anchor" href="#add-executable-生成应用程序" aria-hidden="true">#</a> add_executable 生成应用程序</h2><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">add_executable</span><span class="token punctuation">(</span>应用程序 源文件<span class="token punctuation">)</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="add-library-生成库文件" tabindex="-1"><a class="header-anchor" href="#add-library-生成库文件" aria-hidden="true">#</a> add_library 生成库文件</h2><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 动态库文件</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>lib_hello <span class="token namespace">SHARED</span> main.cpp<span class="token punctuation">)</span>;
<span class="token comment"># 静态库文件</span>
<span class="token keyword">add_library</span><span class="token punctuation">(</span>lib_hello <span class="token namespace">STATIC</span> Main.cpp<span class="token punctuation">)</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-definitions" tabindex="-1"><a class="header-anchor" href="#set-definitions" aria-hidden="true">#</a> set_definitions()</h2><blockquote><p>add_definitions是一个CMake命令，它可以给当前目录和子目录中的目标(target)添加编译器定义(define)。它的语法是：</p></blockquote><p><code>add_definitions (-DFOO -DBAR ...)</code></p><p>其中-D表示定义一个宏，FOO和BAR是宏的名字，你也可以给它们赋值，比如-DFOO=1 -DBAR=2。这些定义会被添加到编译器命令行中，影响源文件的编译。</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token comment"># 定义一个TEST的宏</span>
<span class="token keyword">add_definitions</span><span class="token punctuation">(</span><span class="token string">&quot;-DTEST&quot;</span><span class="token punctuation">)</span>;
<span class="token comment"># 给宏赋值</span>
<span class="token keyword">add_definitions</span><span class="token punctuation">(</span><span class="token string">&quot;-DTEST=1&quot;</span><span class="token punctuation">)</span>;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set-target-properties" tabindex="-1"><a class="header-anchor" href="#set-target-properties" aria-hidden="true">#</a> set_target_properties();</h2>`,44),u={href:"https://cmake.org/cmake/help/v3.3/manual/cmake-properties.7.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<ul><li>set_property(TARGET ...)：设置一个或多个目标的属性，例如：</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set_property</span><span class="token punctuation">(</span>TARGET foo bar PROPERTY <span class="token property">COMPILE_DEFINITIONS</span> FOO=<span class="token number">1</span> BAR=<span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>set_property(SOURCE ...)：设置一个或多个源文件的属性，例如：</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set_property</span><span class="token punctuation">(</span>SOURCE src1.cpp src2.cpp PROPERTY <span class="token property">SKIP_AUTOMOC</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>set_property(DIRECTORY ...)：设置一个或多个目录的属性，例如：</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set_property</span><span class="token punctuation">(</span>DIRECTORY app/src PROPERTY <span class="token property">VS_STARTUP_PROJECT</span> myapp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>set_property(TEST ...)：设置一个或多个测试的属性，例如：</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set_property</span><span class="token punctuation">(</span>TEST mytest PROPERTY <span class="token property">TIMEOUT</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>set_property(INSTALL ...)：设置一个或多个安装文件的属性，例如：</li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code><span class="token keyword">set_property</span><span class="token punctuation">(</span>INSTALL <span class="token string">&quot;bin/myapp&quot;</span> PROPERTY <span class="token property">CPACK_START_MENU_SHORTCUTS</span> <span class="token string">&quot;My App&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function k(v,b){const s=c("ExternalLinkIcon");return l(),t("div",null,[d(`
 * @作者: 14770137
 * @Date: 2022-09-22 15:15:58
`),p,a("blockquote",null,[a("p",null,[n("set_property可以设置的属性取决于您指定的范围，例如目标、源文件、目录、测试或安装文件。每种范围都有一些特定的属性，您可以在"),a("a",u,[n("cmake-properties"),r(s)]),n("文档中查看")])]),m])}const g=i(o,[["render",k],["__file","cmake.html.vue"]]);export{g as default};
