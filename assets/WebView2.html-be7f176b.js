import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-4d86ae58.js";const o={},t=e(`<h1 id="webview2" tabindex="-1"><a class="header-anchor" href="#webview2" aria-hidden="true">#</a> WebView2</h1><h2 id="常用api" tabindex="-1"><a class="header-anchor" href="#常用api" aria-hidden="true">#</a> 常用API</h2><p>WebView2是基于Chromium的Web视图控件，它提供了一系列API，可以通过这些API来操作WebView2控件，包括加载Web内容、处理Web事件、调用JavaScript代码、导航历史记录等。</p><p>以下是WebView2的一些常用API：</p><ol><li><p><code>EnsureCoreWebView2Async()</code>：异步方法，用于确保CoreWebView2对象已经初始化。在WebView2控件加载完毕后，必须调用这个方法才能获得CoreWebView2对象，并在其上执行操作。</p></li><li><p><code>Navigate(string uri)</code>：导航到指定的URL或文件。</p></li><li><p><code>NavigateToString(string htmlContent)</code>：导航到指定的HTML字符串。</p></li><li><p><code>Reload()</code>：重新加载当前网页。</p></li><li><p><code>GoBack()</code>：返回到上一个网页。</p></li><li><p><code>GoForward()</code>：前进到下一个网页。</p></li><li><p><code>ExecuteScriptAsync(string javaScript)</code>：异步执行指定的JavaScript代码。</p></li><li><p><code>AddScriptToExecuteOnDocumentCreatedAsync(string javaScript)</code>：异步添加一个JavaScript代码片段，在网页加载完成后自动执行。</p></li><li><p><code>AddScriptToExecuteOnDocumentCompletedAsync(string javaScript)</code>：异步添加一个JavaScript代码片段，在网页加载完成后自动执行。</p></li><li><p><code>ContainsFullScreenElement</code>：获取WebView2控件中是否存在全屏元素。</p></li><li><p><code>ZoomFactor</code>：获取或设置WebView2控件的缩放系数。</p></li><li><p><code>CoreWebView2.Settings</code>：获取CoreWebView2对象的设置对象，用于设置WebView2控件的各种属性，例如开启或关闭JavaScript、Cookie等功能。</p></li><li><p><code>CoreWebView2.WebMessageReceived</code>：事件，当WebView2控件接收到来自网页的消息时触发。</p></li><li><p><code>CoreWebView2.WebResourceRequested</code>：事件，当WebView2控件向服务器请求资源时触发。</p></li><li><p><code>CoreWebView2.WebResourceResponseReceived</code>：事件，当WebView2控件接收到来自服务器的响应时触发。</p></li></ol><p>这些API只是WebView2的一部分，还有很多其他API可以用于实现不同的功能。如果您需要详细了解WebView2的API，请参考Microsoft官方文档。</p><h2 id="获取页面的cookies" tabindex="-1"><a class="header-anchor" href="#获取页面的cookies" aria-hidden="true">#</a> 获取页面的Cookies</h2><p>要获取当前页面的cookies等请求头，可以使用WebView2中的CoreWebView2对象的相应API来实现。以下是一些常用的方法：</p><ol><li><code>CoreWebView2.CookieManager.GetCookies(string uri)</code>：异步获取指定URL的所有Cookie信息。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> currentUrl <span class="token operator">=</span> webView2<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span>Source<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span>Cookie<span class="token punctuation">&gt;</span></span> cookies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Cookie<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> cookieList <span class="token operator">=</span> <span class="token keyword">await</span> webView2<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span>CookieManager<span class="token punctuation">.</span><span class="token function">GetCookiesAsync</span><span class="token punctuation">(</span>currentUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> cookie <span class="token keyword">in</span> cookieList<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cookies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Cookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> cookie<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> cookie<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> cookie<span class="token punctuation">.</span>Domain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>CoreWebView2.AddWebResourceRequestedFilter(string uri, CoreWebView2WebResourceContext context)</code>：添加用于拦截请求的筛选器。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>webView2<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span><span class="token function">AddWebResourceRequestedFilter</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> CoreWebView2WebResourceContext<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>
webView2<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span>WebResourceRequested <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// e.Request.Headers 包含了请求头信息，可以从中获取Cookie信息</span>
    <span class="token comment">// e.Request.Headers[&quot;Cookie&quot;]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>CoreWebView2.WebMessageReceived</code>：事件，当WebView2控件接收到来自网页的消息时触发。</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>webView2<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span>WebMessageReceived <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// args.TryGetWebMessageAsString() 获取来自网页的消息</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法可以帮助您获取WebView2控件中的Cookie和请求头信息。如果您需要获取更多信息，可以查阅Microsoft官方文档。</p><h2 id="注入c-函数" tabindex="-1"><a class="header-anchor" href="#注入c-函数" aria-hidden="true">#</a> 注入C#函数</h2><p>在使用WebView2时，可以通过C#代码将函数注入到网页中，使得网页可以调用这些函数，这样就可以在网页中调用本地的C#代码。</p><p>以下是一些示例代码，用于将C#函数注入到WebView2中：</p><ol><li>首先，定义一个用于注入到WebView2的C#类，该类必须标记为COM可见，并且包含将被注入到WebView2中的函数：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComVisible</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebView2Object</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> param1<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> param2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 这里是函数实现代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>MyFunction</code>是一个带有两个参数的函数，可以在WebView2中调用。请注意，这个类必须标记为<code>ComVisible</code>，否则在WebView2中无法访问。</p><ol start="2"><li>在加载WebView2之前，将C#类实例注入到WebView2中：</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 创建WebView2环境</span>
<span class="token class-name"><span class="token keyword">var</span></span> env <span class="token operator">=</span> <span class="token keyword">await</span> WebView2Environment<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建WebView2控件</span>
<span class="token class-name"><span class="token keyword">var</span></span> webView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebView2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
webView<span class="token punctuation">.</span>CreationProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CoreWebView2CreationProperties</span>
<span class="token punctuation">{</span>
    BrowserExecutableFolder <span class="token operator">=</span> env<span class="token punctuation">.</span>BrowserExecutableFolder
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> webView<span class="token punctuation">.</span><span class="token function">EnsureCoreWebView2Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将C#类实例注入到WebView2中</span>
webView<span class="token punctuation">.</span>CoreWebView2<span class="token punctuation">.</span><span class="token function">AddHostObjectToScript</span><span class="token punctuation">(</span><span class="token string">&quot;MyObject&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyWebView2Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>AddHostObjectToScript</code>方法将<code>MyWebView2Object</code>类的实例注入到WebView2中，<code>MyObject</code>是一个用于在WebView2中访问这个实例的名称。这个名称可以在JavaScript中使用。</p><ol start="3"><li>在WebView2中使用注入的函数：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在JavaScript中调用注入的函数</span>
window<span class="token punctuation">.</span>MyObject<span class="token punctuation">.</span><span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token string">&quot;param1&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>window.MyObject.MyFunction</code>调用了<code>MyFunction</code>函数，并传递了两个参数。这个函数将会在C#中被执行。</p><p>通过这种方式，可以将C#函数注入到WebView2中，使得网页可以调用本地的C#代码。请注意，为了确保安全性，需要对注入的函数进行适当的控制和验证，以防止任意代码执行或潜在的安全漏洞。</p>`,28),p=[t];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","WebView2.html.vue"]]);export{d as default};
