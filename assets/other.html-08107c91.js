import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,a as e}from"./app-9ed46f86.js";const l={},o=e(`<h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h1><h2 id="双冒号-运算符的作用" tabindex="-1"><a class="header-anchor" href="#双冒号-运算符的作用" aria-hidden="true">#</a> 双冒号<code>::</code>运算符的作用</h2><p>在Kotlin中，双冒号运算符&quot;::&quot;用于引用函数、属性或类。它有两个主要的用途：</p><ol><li>函数引用：双冒号运算符可以用于引用一个函数，而不调用它。这对于将函数作为参数传递或将函数赋值给变量非常有用。例如，考虑以下函数：</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用双冒号运算符来引用这个函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> functionRef <span class="token operator">=</span> <span class="token operator">::</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，<code>functionRef</code>变量持有了对<code>hello</code>函数的引用，你可以稍后通过调用<code>functionRef()</code>来执行它。</p><ol start="2"><li>类引用：双冒号运算符也可以用于引用类。这在反射和泛型等场景下非常有用。例如，考虑以下类：</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以使用双冒号运算符来引用这个类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> classRef <span class="token operator">=</span> Person<span class="token operator">::</span><span class="token keyword">class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，<code>classRef</code>变量持有了对<code>Person</code>类的引用。你可以使用<code>classRef</code>来获取类的相关信息，或者创建类的实例。</p><p>总而言之，双冒号运算符在Kotlin中用于引用函数、属性或类，它提供了一种简洁的方式来获取对它们的引用，而不执行它们。</p><h2 id="with、apply、run、let用法" tabindex="-1"><a class="header-anchor" href="#with、apply、run、let用法" aria-hidden="true">#</a> with、apply、run、let用法</h2><p>在Kotlin中，有几个标准库函数（Standard Library Functions）可以用于简化对象操作和作用域内的代码块。以下是其中一些常用的函数以及它们的说明：</p><ol><li><p>let： <code>let</code>函数是针对一个对象执行特定的操作，并且可以在操作过程中引用该对象。它接收一个lambda表达式作为参数，该lambda表达式将当前对象作为参数传递，并在lambda表达式内部对该对象进行操作。<code>let</code>函数的返回值是lambda表达式的结果。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 对象操作</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token comment">// 返回结果</span>
    result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>apply： <code>apply</code>函数用于对对象进行配置操作。它接收一个lambda表达式作为参数，在lambda表达式内部可以对对象进行一系列的属性配置操作。<code>apply</code>函数的返回值是该对象本身。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> obj <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对象配置</span>
    property1 <span class="token operator">=</span> value1
    property2 <span class="token operator">=</span> value2
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>run： <code>run</code>函数类似于<code>let</code>函数，但它可以在lambda表达式内部访问该对象的成员函数而不仅限于属性。它接收一个lambda表达式作为参数，将当前对象作为接收者（receiver）传递给lambda表达式，并在lambda表达式内部对该对象进行操作。<code>run</code>函数的返回值是lambda表达式的结果。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 对象操作</span>
    <span class="token function">memberFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token comment">// 返回结果</span>
    result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>with： <code>with</code>函数类似于<code>run</code>函数，但是它不是一个扩展函数，而是一个顶层函数。它接收一个对象和一个lambda表达式作为参数，并在lambda表达式内部对该对象进行操作。<code>with</code>函数的返回值是lambda表达式的结果。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 对象操作</span>
    <span class="token function">memberFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token comment">// 返回结果</span>
    result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些函数在不同的场景中有不同的用途，但它们的共同点是可以简化对象操作和作用域内的代码块。你可以根据具体的需求选择适当的函数来使用。</p>`,18),t=[o];function i(c,p){return a(),s("div",null,t)}const u=n(l,[["render",i],["__file","other.html.vue"]]);export{u as default};
