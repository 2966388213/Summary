import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-f6611fe2.js";const p={},t=e(`<h1 id="版本更新" tabindex="-1"><a class="header-anchor" href="#版本更新" aria-hidden="true">#</a> 版本更新</h1><h2 id="各个版本更新的功能" tabindex="-1"><a class="header-anchor" href="#各个版本更新的功能" aria-hidden="true">#</a> 各个版本更新的功能</h2><p>以下是C# 7至C# 11更新的一些功能：</p><p>C# 7:</p><ul><li>Tuples（元组）</li><li>Local Functions（局部函数）</li><li>Pattern matching（模式匹配）</li><li>Deconstruction（解构）</li><li>Digit Separators（数字分隔符）</li><li>Ref locals and returns（引用返回）</li></ul><p>C# 7.1:</p><ul><li>Async Main（异步主函数）</li><li>Default expressions in parameters（参数默认值）</li><li>Infer tuple names（元组名称推断）</li></ul><p>C# 7.2:</p><ul><li>Non-trailing named arguments（非尾随命名参数）</li><li>Leading underscores in numeric literals（数字字面值中的前导下划线）</li></ul><p>C# 7.3:</p><ul><li>Accessing fixed fields without pinning（不固定访问固定字段）</li><li>Stackalloc initializers（栈上分配的数组初始化器）</li><li>Tuple equality operators（元组相等运算符）</li></ul><p>C# 8:</p><ul><li>Nullable reference types（可空引用类型）</li><li>Async streams（异步流）</li><li>Default interface methods（接口默认实现）</li><li>Recursive patterns（递归模式）</li><li>Ranges and indices（范围和索引）</li><li>Switch expressions（Switch表达式）</li><li>Using declarations（使用声明）</li></ul><p>C# 9:</p><ul><li>Init-only properties and setters（只初始化属性和设置器）</li><li>Top-level statements（顶层语句）</li><li>Records（记录）</li><li>Pattern-based indexing（基于模式的索引）</li><li>Function pointers（函数指针）</li><li>Native sized integers（本机大小的整数）</li><li>Improved performance for the System.Text.Json APIs（针对System.Text.Json API的性能改进）</li></ul><p>C# 10:</p><ul><li>Global usings（全局using语句）</li><li>Constant interpolated strings（常量插值字符串）</li><li>Improved lambda support for Func delegates（Func委托的lambda支持改进）</li><li>File-scoped namespaces（文件范围的命名空间）</li><li>Global namespace usings（全局命名空间using语句）</li></ul><p>C# 11:</p><ul><li>Interpolated string handlers（插值字符串处理程序）</li><li>Implicit using of System namespaces（隐式使用System命名空间）</li><li>Extended property patterns（扩展属性模式）</li><li>Support for interpolated strings in attributes（插值字符串在属性中的支持）</li><li>Target-typed new expressions（目标类型的新表达式）</li></ul><h2 id="c-8-0-接口默认实现是什么" tabindex="-1"><a class="header-anchor" href="#c-8-0-接口默认实现是什么" aria-hidden="true">#</a> C# 8.0 接口默认实现是什么</h2><p>接口默认实现是C# 8中引入的一项功能，它允许在接口中定义默认实现，这样实现该接口的类就不需要必须提供实现。如果实现类没有提供自己的实现，就会使用接口的默认实现。</p><p>例如，以下是一个定义了默认实现的接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Default implementation of MyMethod.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，任何实现 <code>IMyInterface</code> 接口的类都可以使用默认的 <code>MyMethod()</code> 实现，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMyInterface</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// 没有提供自己的实现，将使用默认实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 <code>MyClass</code> 中没有实现 <code>MyMethod()</code> 方法，将会使用 <code>IMyInterface</code> 中的默认实现。这可以让接口的实现类更加简洁，减少不必要的代码重复。但是需要注意，如果实现类提供了自己的实现，那么它将会覆盖接口中的默认实现。</p><h2 id="c-8-0-递归模式的详细说明" tabindex="-1"><a class="header-anchor" href="#c-8-0-递归模式的详细说明" aria-hidden="true">#</a> C# 8.0 递归模式的详细说明</h2><p>递归模式是C# 8中引入的一项功能，它可以在一种更直观的方式下进行复杂的模式匹配。通常，在使用模式匹配时，需要多次嵌套使用 switch 或 if 语句来处理复杂的数据类型。而递归模式可以在一个匹配语句中递归地匹配一个复杂的数据结构。</p><p>例如，假设有一个表示二叉树的数据结构：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTree</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">BinaryTree</span> Left <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">BinaryTree</span> Right <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，假设想要遍历该二叉树并对每个节点执行某些操作。使用递归模式，可以这样做：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Traverse</span><span class="token punctuation">(</span><span class="token class-name">BinaryTree</span> node<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token punctuation">{</span> Left<span class="token punctuation">:</span> <span class="token class-name"><span class="token keyword">var</span></span> left<span class="token punctuation">,</span> <span class="token named-parameter punctuation">Right</span><span class="token punctuation">:</span> <span class="token keyword">var</span> right <span class="token punctuation">}</span><span class="token punctuation">:</span>
            <span class="token function">Traverse</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Traverse</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token punctuation">{</span> Left<span class="token punctuation">:</span> <span class="token keyword">var</span> left <span class="token punctuation">}</span><span class="token punctuation">:</span>
            <span class="token function">Traverse</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token punctuation">{</span> Right<span class="token punctuation">:</span> <span class="token keyword">var</span> right <span class="token punctuation">}</span><span class="token punctuation">:</span>
            <span class="token function">Traverse</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token punctuation">{</span> Value<span class="token punctuation">:</span> <span class="token keyword">var</span> <span class="token keyword">value</span> <span class="token punctuation">}</span><span class="token punctuation">:</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，使用了一个 switch 语句来匹配不同类型的 BinaryTree 对象。在这里，递归模式允许匹配嵌套属性（例如 Left 和 Right）和字段（例如 Value）的值，并在一个匹配语句中递归地遍历二叉树。</p><p>总体而言，递归模式使得处理复杂的数据类型更加容易和直观。它可以在一个匹配语句中处理嵌套的数据结构，减少了代码嵌套层次，提高了代码的可读性和可维护性。</p><h2 id="只初始化属性和设置器的说明" tabindex="-1"><a class="header-anchor" href="#只初始化属性和设置器的说明" aria-hidden="true">#</a> 只初始化属性和设置器的说明</h2><p>C# 9中引入了只初始化属性和设置器的功能，这使得属性的初始化更加简单和直观。该功能使得可以定义一个只读的自动属性，该属性只能在构造函数中进行初始化。这可以确保在对象创建之后，该属性的值不会发生变化。</p><p>以下是一个示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        FirstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        LastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>FirstName</code>和<code>LastName</code>属性都使用了<code>init</code>关键字。这意味着它们只能在对象构造函数中初始化。也就是说，一旦对象被创建，这些属性的值就不能再次修改。</p><p>使用这种模式，可以让代码更加简洁，减少不必要的赋值操作，并且可以提高代码的可读性和可维护性。此外，只初始化属性和设置器还可以让开发人员更容易地设计不可变对象，这在多线程和并发编程中非常有用。</p><h2 id="init加上readonly有什么作用吗-以及readonly的说明" tabindex="-1"><a class="header-anchor" href="#init加上readonly有什么作用吗-以及readonly的说明" aria-hidden="true">#</a> init加上readonly有什么作用吗，以及readonly的说明</h2><p>将 <code>init</code> 与 <code>readonly</code> 关键字一起使用，可以创建只读属性，该属性的值只能在对象的构造函数中初始化，并且在初始化后不能被更改。</p><p>以下是一个示例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">init</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token class-name">DateTime</span> DateOfBirth<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> firstName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lastName<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> dateOfBirth<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        FirstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        LastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
        DateOfBirth <span class="token operator">=</span> dateOfBirth<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>DateOfBirth</code> 属性使用了 <code>readonly</code> 关键字，这意味着它只能在对象构造函数中初始化，并且在初始化后不能被更改。</p><p>注意，只有在使用 <code>init</code> 关键字时，才能将 <code>readonly</code> 关键字与属性一起使用，因为 <code>init</code> 关键字指定属性只能在对象构造函数中进行初始化。</p><p><code>readonly</code> 关键字可以用于类的字段和局部变量。用于字段时，它使该字段成为只读字段，即该字段的值只能在对象的构造函数中或在定义该字段的初始化器中进行初始化，不能在其他位置被修改。用于局部变量时，它将确保该变量被声明后不能被重新赋值。</p><p><code>readonly</code> 关键字通常用于创建不可变对象，这在多线程和并发编程中非常有用。此外，使用只读字段可以提高代码的安全性和可维护性。</p><h2 id="字符串内插" tabindex="-1"><a class="header-anchor" href="#字符串内插" aria-hidden="true">#</a> 字符串内插</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> b <span class="token operator">=</span> <span class="token string">&quot;hello word&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> a <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">insert</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原始字面量" tabindex="-1"><a class="header-anchor" href="#原始字面量" aria-hidden="true">#</a> 原始字面量</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> X <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> Y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> pointMessage <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;&quot;</span></span>&quot;The point <span class="token string">&quot;{X}, {Y}&quot;</span> <span class="token keyword">is</span> <span class="token punctuation">{</span>Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>X <span class="token operator">*</span> X <span class="token operator">+</span> Y <span class="token operator">*</span> Y<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">from</span> the origin<span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pointMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:  The point &quot;2, 3&quot; is 3.605551275463989 from the origin.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在内插的原始字符串字面量中使用多个 $ 字符，以在输出字符串中嵌入 { 和 } 字符，而无需对这些字符进行转义</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> X <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> Y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> pointMessage <span class="token operator">=</span> $<span class="token interpolation-string"><span class="token string">$&quot;&quot;</span></span>&quot;<span class="token return-type class-name">The</span> point <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>X<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>Y<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">is</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>Math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>X <span class="token operator">*</span> X <span class="token operator">+</span> Y <span class="token operator">*</span> Y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">from</span> the origin<span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>pointMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:  The point {2, 3} is 3.605551275463989 from the origin.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="范围运算符" tabindex="-1"><a class="header-anchor" href="#范围运算符" aria-hidden="true">#</a> 范围运算符</h2><p>C# 8.0 引入了两个新的运算符：范围运算符 <code>..</code> 和空合并运算符 <code>??=</code>。</p><p>范围运算符 <code>..</code> 可以用于创建一个值范围。它的语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>start..end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>start</code> 和 <code>end</code> 分别表示范围的开始和结束，可以是整数、浮点数、枚举或实现了 <code>IComparable</code> 接口的类型。</p><p>范围运算符可以用于数组、列表、字符串等类型的索引器中，用于指定需要访问的元素范围。例如，以下代码创建了一个整数数组，并使用范围运算符访问其中的一部分元素：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> subset <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token range operator">..</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// subset 包含 {2, 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，范围运算符 <code>2..4</code> 表示索引器需要返回从下标 2（包含）到下标 4（不包含）的元素。</p><p>范围运算符也可以与 <code>^</code> 运算符（用于表示从末尾开始的索引）一起使用。例如，以下代码返回数组的最后两个元素：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> subset <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token operator">^</span><span class="token number">2</span><span class="token range operator">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// subset 包含 {4, 5}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，范围运算符 <code>^2..</code> 表示索引器需要返回从倒数第二个元素（包含）到数组末尾的元素。</p><p>需要注意的是，范围运算符 <code>..</code> 表示左闭右开区间。也就是说，范围 <code>start..end</code> 包含起始元素 <code>start</code>，但不包含结束元素 <code>end</code>。</p><p>范围运算符可以和其他运算符一起使用，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> subset <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token range operator">..</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// subset 包含 {2, 3, 4}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，范围运算符 <code>2..^1</code> 表示索引器需要返回从下标 2（包含）到倒数第二个元素（不包含）的元素。</p><p>总之，范围运算符 <code>..</code> 是一个非常有用的功能，可以使代码更加简洁、易读。</p>`,70),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","updataList.html.vue"]]);export{d as default};
