import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as r,a}from"./app-7f909fec.js";const e={},h=a('<h1 id="汇编" tabindex="-1"><a class="header-anchor" href="#汇编" aria-hidden="true">#</a> 汇编</h1><h2 id="x86汇编指令集" tabindex="-1"><a class="header-anchor" href="#x86汇编指令集" aria-hidden="true">#</a> x86汇编指令集</h2><h3 id="数据传输指令" tabindex="-1"><a class="header-anchor" href="#数据传输指令" aria-hidden="true">#</a> 数据传输指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>MOV</td><td></td></tr><tr><td>PUSH</td><td></td></tr><tr><td>POP</td><td></td></tr></tbody></table><h3 id="算数运算指令集" tabindex="-1"><a class="header-anchor" href="#算数运算指令集" aria-hidden="true">#</a> 算数运算指令集</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>add</td><td>加法</td></tr><tr><td>sub</td><td>减法（subtract）</td></tr><tr><td>mul</td><td>乘法(multiply)</td></tr><tr><td>div</td><td>除法(divide)</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>or</td><td>或</td></tr><tr><td>and</td><td>与</td></tr><tr><td>xor</td><td>亦或</td></tr><tr><td>not</td><td>不等于</td></tr></tbody></table><h3 id="比较指令" tabindex="-1"><a class="header-anchor" href="#比较指令" aria-hidden="true">#</a> 比较指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>CMP</td><td>CMP指令主要用于比较两个操作数的大小关系，可以比较寄存器和内存单元中的值。CMP指令执行后，会将比较结果保存到标志寄存器中，但不会修改操作数的值。通常情况下，CMP指令会与条件跳转指令一起使用，根据比较结果来控制程序的执行流程。</td></tr><tr><td>TEST</td><td>TEST指令则用于测试两个操作数的位是否都为1，可以比较寄存器和内存单元中的值。TEST指令执行后，会将比较结果保存到标志寄存器中，但不会修改操作数的值。TEST指令通常用于位操作和掩码操作，例如清除一个字节中的某些位。</td></tr></tbody></table><h3 id="分支跳转指令" tabindex="-1"><a class="header-anchor" href="#分支跳转指令" aria-hidden="true">#</a> 分支跳转指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>JMP</td><td></td></tr><tr><td>JZ</td><td></td></tr><tr><td>JE</td><td></td></tr><tr><td>JNE</td><td></td></tr></tbody></table><h3 id="循环指令" tabindex="-1"><a class="header-anchor" href="#循环指令" aria-hidden="true">#</a> 循环指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>LOOP</td><td></td></tr><tr><td>LOOPZ</td><td></td></tr><tr><td>LOOPNZ</td><td></td></tr></tbody></table><h3 id="函数调用指令" tabindex="-1"><a class="header-anchor" href="#函数调用指令" aria-hidden="true">#</a> 函数调用指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>CALL</td><td></td></tr><tr><td>CALL</td><td></td></tr></tbody></table><h3 id="字符串操作指令" tabindex="-1"><a class="header-anchor" href="#字符串操作指令" aria-hidden="true">#</a> 字符串操作指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>MOVSB</td><td></td></tr><tr><td>MOVSW</td><td></td></tr><tr><td>SCASB</td><td></td></tr><tr><td>SCASW</td><td></td></tr></tbody></table><h3 id="浮点运算指令" tabindex="-1"><a class="header-anchor" href="#浮点运算指令" aria-hidden="true">#</a> 浮点运算指令</h3><table><thead><tr><th>指令</th><th>解释</th></tr></thead><tbody><tr><td>FADD</td><td></td></tr><tr><td>FSUB</td><td></td></tr><tr><td>FMUL</td><td></td></tr><tr><td>FDIV</td><td></td></tr></tbody></table>',20),i=[h];function n(o,b){return d(),r("div",null,i)}const s=t(e,[["render",n],["__file","index.html.vue"]]);export{s as default};
